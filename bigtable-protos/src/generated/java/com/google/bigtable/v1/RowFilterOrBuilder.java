// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/bigtable/v1/bigtable_data.proto

package com.google.bigtable.v1;

public interface RowFilterOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.bigtable.v1.RowFilter)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <code>optional .google.bigtable.v1.RowFilter.Chain chain = 1;</code>
   *
   * <pre>
   * Applies several RowFilters to the data in sequence, progressively
   * narrowing the results.
   * </pre>
   */
  com.google.bigtable.v1.RowFilter.Chain getChain();
  /**
   * <code>optional .google.bigtable.v1.RowFilter.Chain chain = 1;</code>
   *
   * <pre>
   * Applies several RowFilters to the data in sequence, progressively
   * narrowing the results.
   * </pre>
   */
  com.google.bigtable.v1.RowFilter.ChainOrBuilder getChainOrBuilder();

  /**
   * <code>optional .google.bigtable.v1.RowFilter.Interleave interleave = 2;</code>
   *
   * <pre>
   * Applies several RowFilters to the data in parallel and combines the
   * results.
   * </pre>
   */
  com.google.bigtable.v1.RowFilter.Interleave getInterleave();
  /**
   * <code>optional .google.bigtable.v1.RowFilter.Interleave interleave = 2;</code>
   *
   * <pre>
   * Applies several RowFilters to the data in parallel and combines the
   * results.
   * </pre>
   */
  com.google.bigtable.v1.RowFilter.InterleaveOrBuilder getInterleaveOrBuilder();

  /**
   * <code>optional .google.bigtable.v1.RowFilter.Condition condition = 3;</code>
   *
   * <pre>
   * Applies one of two possible RowFilters to the data based on the output of
   * a predicate RowFilter.
   * </pre>
   */
  com.google.bigtable.v1.RowFilter.Condition getCondition();
  /**
   * <code>optional .google.bigtable.v1.RowFilter.Condition condition = 3;</code>
   *
   * <pre>
   * Applies one of two possible RowFilters to the data based on the output of
   * a predicate RowFilter.
   * </pre>
   */
  com.google.bigtable.v1.RowFilter.ConditionOrBuilder getConditionOrBuilder();

  /**
   * <code>optional bytes row_key_regex_filter = 4;</code>
   *
   * <pre>
   * Matches only cells from rows whose keys satisfy the given RE2 regex. In
   * other words, passes through the entire row when the key matches, and
   * otherwise produces an empty row.
   * Note that, since row keys can contain arbitrary bytes, the '&#92;C' escape
   * sequence must be used if a true wildcard is desired. The '.' character
   * will not match the new line character '&#92;n', which may be present in a
   * binary key.
   * </pre>
   */
  com.google.protobuf.ByteString getRowKeyRegexFilter();

  /**
   * <code>optional double row_sample_filter = 14;</code>
   *
   * <pre>
   * Matches all cells from a row with probability p, and matches no cells
   * from the row with probability 1-p.
   * </pre>
   */
  double getRowSampleFilter();

  /**
   * <code>optional string family_name_regex_filter = 5;</code>
   *
   * <pre>
   * Matches only cells from columns whose families satisfy the given RE2
   * regex. For technical reasons, the regex must not contain the ':'
   * character, even if it is not being used as a literal.
   * Note that, since column families cannot contain the new line character
   * '&#92;n', it is sufficient to use '.' as a full wildcard when matching
   * column family names.
   * </pre>
   */
  java.lang.String getFamilyNameRegexFilter();
  /**
   * <code>optional string family_name_regex_filter = 5;</code>
   *
   * <pre>
   * Matches only cells from columns whose families satisfy the given RE2
   * regex. For technical reasons, the regex must not contain the ':'
   * character, even if it is not being used as a literal.
   * Note that, since column families cannot contain the new line character
   * '&#92;n', it is sufficient to use '.' as a full wildcard when matching
   * column family names.
   * </pre>
   */
  com.google.protobuf.ByteString
      getFamilyNameRegexFilterBytes();

  /**
   * <code>optional bytes column_qualifier_regex_filter = 6;</code>
   *
   * <pre>
   * Matches only cells from columns whose qualifiers satisfy the given RE2
   * regex.
   * Note that, since column qualifiers can contain arbitrary bytes, the '&#92;C'
   * escape sequence must be used if a true wildcard is desired. The '.'
   * character will not match the new line character '&#92;n', which may be
   * present in a binary qualifier.
   * </pre>
   */
  com.google.protobuf.ByteString getColumnQualifierRegexFilter();

  /**
   * <code>optional .google.bigtable.v1.ColumnRange column_range_filter = 7;</code>
   *
   * <pre>
   * Matches only cells from columns within the given range.
   * </pre>
   */
  com.google.bigtable.v1.ColumnRange getColumnRangeFilter();
  /**
   * <code>optional .google.bigtable.v1.ColumnRange column_range_filter = 7;</code>
   *
   * <pre>
   * Matches only cells from columns within the given range.
   * </pre>
   */
  com.google.bigtable.v1.ColumnRangeOrBuilder getColumnRangeFilterOrBuilder();

  /**
   * <code>optional .google.bigtable.v1.TimestampRange timestamp_range_filter = 8;</code>
   *
   * <pre>
   * Matches only cells with timestamps within the given range.
   * </pre>
   */
  com.google.bigtable.v1.TimestampRange getTimestampRangeFilter();
  /**
   * <code>optional .google.bigtable.v1.TimestampRange timestamp_range_filter = 8;</code>
   *
   * <pre>
   * Matches only cells with timestamps within the given range.
   * </pre>
   */
  com.google.bigtable.v1.TimestampRangeOrBuilder getTimestampRangeFilterOrBuilder();

  /**
   * <code>optional bytes value_regex_filter = 9;</code>
   *
   * <pre>
   * Matches only cells with values that satisfy the given regular expression.
   * Note that, since cell values can contain arbitrary bytes, the '&#92;C' escape
   * sequence must be used if a true wildcard is desired. The '.' character
   * will not match the new line character '&#92;n', which may be present in a
   * binary value.
   * </pre>
   */
  com.google.protobuf.ByteString getValueRegexFilter();

  /**
   * <code>optional .google.bigtable.v1.ValueRange value_range_filter = 15;</code>
   *
   * <pre>
   * Matches only cells with values that fall within the given range.
   * </pre>
   */
  com.google.bigtable.v1.ValueRange getValueRangeFilter();
  /**
   * <code>optional .google.bigtable.v1.ValueRange value_range_filter = 15;</code>
   *
   * <pre>
   * Matches only cells with values that fall within the given range.
   * </pre>
   */
  com.google.bigtable.v1.ValueRangeOrBuilder getValueRangeFilterOrBuilder();

  /**
   * <code>optional int32 cells_per_row_offset_filter = 10;</code>
   *
   * <pre>
   * Skips the first N cells of each row, matching all subsequent cells.
   * </pre>
   */
  int getCellsPerRowOffsetFilter();

  /**
   * <code>optional int32 cells_per_row_limit_filter = 11;</code>
   *
   * <pre>
   * Matches only the first N cells of each row.
   * </pre>
   */
  int getCellsPerRowLimitFilter();

  /**
   * <code>optional int32 cells_per_column_limit_filter = 12;</code>
   *
   * <pre>
   * Matches only the most recent N cells within each column. For example,
   * if N=2, this filter would match column "foo:bar" at timestamps 10 and 9,
   * skip all earlier cells in "foo:bar", and then begin matching again in
   * column "foo:bar2".
   * </pre>
   */
  int getCellsPerColumnLimitFilter();

  /**
   * <code>optional bool strip_value_transformer = 13;</code>
   *
   * <pre>
   * Replaces each cell's value with the empty string.
   * </pre>
   */
  boolean getStripValueTransformer();
}

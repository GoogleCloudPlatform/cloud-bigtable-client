// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/bigtable/v1/bigtable_service_messages.proto

package com.google.bigtable.v1;

public interface MutateRowRequestOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.bigtable.v1.MutateRowRequest)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <code>optional string table_name = 1;</code>
   *
   * <pre>
   * The unique name of the table to which the mutation should be applied.
   * </pre>
   */
  java.lang.String getTableName();
  /**
   * <code>optional string table_name = 1;</code>
   *
   * <pre>
   * The unique name of the table to which the mutation should be applied.
   * </pre>
   */
  com.google.protobuf.ByteString
      getTableNameBytes();

  /**
   * <code>optional bytes row_key = 2;</code>
   *
   * <pre>
   * The key of the row to which the mutation should be applied.
   * </pre>
   */
  com.google.protobuf.ByteString getRowKey();

  /**
   * <code>repeated .google.bigtable.v1.Mutation mutations = 3;</code>
   *
   * <pre>
   * Changes to be atomically applied to the specified row. Entries are applied
   * in order, meaning that earlier mutations can be masked by later ones.
   * Must contain at least one entry and at most 100000.
   * </pre>
   */
  java.util.List<com.google.bigtable.v1.Mutation> 
      getMutationsList();
  /**
   * <code>repeated .google.bigtable.v1.Mutation mutations = 3;</code>
   *
   * <pre>
   * Changes to be atomically applied to the specified row. Entries are applied
   * in order, meaning that earlier mutations can be masked by later ones.
   * Must contain at least one entry and at most 100000.
   * </pre>
   */
  com.google.bigtable.v1.Mutation getMutations(int index);
  /**
   * <code>repeated .google.bigtable.v1.Mutation mutations = 3;</code>
   *
   * <pre>
   * Changes to be atomically applied to the specified row. Entries are applied
   * in order, meaning that earlier mutations can be masked by later ones.
   * Must contain at least one entry and at most 100000.
   * </pre>
   */
  int getMutationsCount();
  /**
   * <code>repeated .google.bigtable.v1.Mutation mutations = 3;</code>
   *
   * <pre>
   * Changes to be atomically applied to the specified row. Entries are applied
   * in order, meaning that earlier mutations can be masked by later ones.
   * Must contain at least one entry and at most 100000.
   * </pre>
   */
  java.util.List<? extends com.google.bigtable.v1.MutationOrBuilder> 
      getMutationsOrBuilderList();
  /**
   * <code>repeated .google.bigtable.v1.Mutation mutations = 3;</code>
   *
   * <pre>
   * Changes to be atomically applied to the specified row. Entries are applied
   * in order, meaning that earlier mutations can be masked by later ones.
   * Must contain at least one entry and at most 100000.
   * </pre>
   */
  com.google.bigtable.v1.MutationOrBuilder getMutationsOrBuilder(
      int index);
}

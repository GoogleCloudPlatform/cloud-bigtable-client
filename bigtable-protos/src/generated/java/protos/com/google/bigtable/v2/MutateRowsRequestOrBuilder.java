// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/bigtable/v2/bigtable.proto

package com.google.bigtable.v2;

public interface MutateRowsRequestOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.bigtable.v2.MutateRowsRequest)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <code>optional string table_name = 1;</code>
   *
   * <pre>
   * The unique name of the table to which the mutations should be applied.
   * </pre>
   */
  java.lang.String getTableName();
  /**
   * <code>optional string table_name = 1;</code>
   *
   * <pre>
   * The unique name of the table to which the mutations should be applied.
   * </pre>
   */
  com.google.protobuf.ByteString
      getTableNameBytes();

  /**
   * <code>repeated .google.bigtable.v2.MutateRowsRequest.Entry entries = 2;</code>
   *
   * <pre>
   * The row keys/mutations to be applied in bulk.
   * Each entry is applied as an atomic mutation, but the entries may be
   * applied in arbitrary order (even between entries for the same row).
   * At least one entry must be specified, and in total the entries may
   * contain at most 100000 mutations.
   * </pre>
   */
  java.util.List<com.google.bigtable.v2.MutateRowsRequest.Entry> 
      getEntriesList();
  /**
   * <code>repeated .google.bigtable.v2.MutateRowsRequest.Entry entries = 2;</code>
   *
   * <pre>
   * The row keys/mutations to be applied in bulk.
   * Each entry is applied as an atomic mutation, but the entries may be
   * applied in arbitrary order (even between entries for the same row).
   * At least one entry must be specified, and in total the entries may
   * contain at most 100000 mutations.
   * </pre>
   */
  com.google.bigtable.v2.MutateRowsRequest.Entry getEntries(int index);
  /**
   * <code>repeated .google.bigtable.v2.MutateRowsRequest.Entry entries = 2;</code>
   *
   * <pre>
   * The row keys/mutations to be applied in bulk.
   * Each entry is applied as an atomic mutation, but the entries may be
   * applied in arbitrary order (even between entries for the same row).
   * At least one entry must be specified, and in total the entries may
   * contain at most 100000 mutations.
   * </pre>
   */
  int getEntriesCount();
  /**
   * <code>repeated .google.bigtable.v2.MutateRowsRequest.Entry entries = 2;</code>
   *
   * <pre>
   * The row keys/mutations to be applied in bulk.
   * Each entry is applied as an atomic mutation, but the entries may be
   * applied in arbitrary order (even between entries for the same row).
   * At least one entry must be specified, and in total the entries may
   * contain at most 100000 mutations.
   * </pre>
   */
  java.util.List<? extends com.google.bigtable.v2.MutateRowsRequest.EntryOrBuilder> 
      getEntriesOrBuilderList();
  /**
   * <code>repeated .google.bigtable.v2.MutateRowsRequest.Entry entries = 2;</code>
   *
   * <pre>
   * The row keys/mutations to be applied in bulk.
   * Each entry is applied as an atomic mutation, but the entries may be
   * applied in arbitrary order (even between entries for the same row).
   * At least one entry must be specified, and in total the entries may
   * contain at most 100000 mutations.
   * </pre>
   */
  com.google.bigtable.v2.MutateRowsRequest.EntryOrBuilder getEntriesOrBuilder(
      int index);
}

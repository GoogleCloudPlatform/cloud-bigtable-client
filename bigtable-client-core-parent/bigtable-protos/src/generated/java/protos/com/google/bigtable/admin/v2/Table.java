// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/bigtable/admin/v2/table.proto

package com.google.bigtable.admin.v2;

/**
 * Protobuf type {@code google.bigtable.admin.v2.Table}
 *
 * <pre>
 * A collection of user data indexed by row, column, and timestamp.
 * Each table is served using the resources of its parent cluster.
 * </pre>
 */
public  final class Table extends
    com.google.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:google.bigtable.admin.v2.Table)
    TableOrBuilder {
  // Use Table.newBuilder() to construct.
  private Table(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
    super(builder);
  }
  private Table() {
    name_ = "";
    granularity_ = 0;
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
  }
  private Table(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
    this();
    int mutable_bitField0_ = 0;
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!input.skipField(tag)) {
              done = true;
            }
            break;
          }
          case 10: {
            String s = input.readStringRequireUtf8();

            name_ = s;
            break;
          }
          case 18: {
            if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
              clusterStates_ = com.google.protobuf.MapField.newMapField(
                  ClusterStatesDefaultEntryHolder.defaultEntry);
              mutable_bitField0_ |= 0x00000002;
            }
            com.google.protobuf.MapEntry<java.lang.String, com.google.bigtable.admin.v2.Table.ClusterState>
            clusterStates = input.readMessage(
                ClusterStatesDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
            clusterStates_.getMutableMap().put(clusterStates.getKey(), clusterStates.getValue());
            break;
          }
          case 26: {
            if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
              columnFamilies_ = com.google.protobuf.MapField.newMapField(
                  ColumnFamiliesDefaultEntryHolder.defaultEntry);
              mutable_bitField0_ |= 0x00000004;
            }
            com.google.protobuf.MapEntry<java.lang.String, com.google.bigtable.admin.v2.ColumnFamily>
            columnFamilies = input.readMessage(
                ColumnFamiliesDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
            columnFamilies_.getMutableMap().put(columnFamilies.getKey(), columnFamilies.getValue());
            break;
          }
          case 32: {
            int rawValue = input.readEnum();

            granularity_ = rawValue;
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw new RuntimeException(e.setUnfinishedMessage(this));
    } catch (java.io.IOException e) {
      throw new RuntimeException(
          new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this));
    } finally {
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.bigtable.admin.v2.TableProto.internal_static_google_bigtable_admin_v2_Table_descriptor;
  }

  @SuppressWarnings({"rawtypes"})
  protected com.google.protobuf.MapField internalGetMapField(
      int number) {
    switch (number) {
      case 2:
        return internalGetClusterStates();
      case 3:
        return internalGetColumnFamilies();
      default:
        throw new RuntimeException(
            "Invalid map field number: " + number);
    }
  }
  protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.bigtable.admin.v2.TableProto.internal_static_google_bigtable_admin_v2_Table_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.bigtable.admin.v2.Table.class, com.google.bigtable.admin.v2.Table.Builder.class);
  }

  /**
   * Protobuf enum {@code google.bigtable.admin.v2.Table.TimestampGranularity}
   */
  public enum TimestampGranularity
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>TIMESTAMP_GRANULARITY_UNSPECIFIED = 0;</code>
     */
    TIMESTAMP_GRANULARITY_UNSPECIFIED(0, 0),
    /**
     * <code>MILLIS = 1;</code>
     */
    MILLIS(1, 1),
    UNRECOGNIZED(-1, -1),
    ;

    /**
     * <code>TIMESTAMP_GRANULARITY_UNSPECIFIED = 0;</code>
     */
    public static final int TIMESTAMP_GRANULARITY_UNSPECIFIED_VALUE = 0;
    /**
     * <code>MILLIS = 1;</code>
     */
    public static final int MILLIS_VALUE = 1;


    public final int getNumber() {
      if (index == -1) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    public static TimestampGranularity valueOf(int value) {
      switch (value) {
        case 0: return TIMESTAMP_GRANULARITY_UNSPECIFIED;
        case 1: return MILLIS;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<TimestampGranularity>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        TimestampGranularity> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<TimestampGranularity>() {
            public TimestampGranularity findValueByNumber(int number) {
              return TimestampGranularity.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.google.bigtable.admin.v2.Table.getDescriptor().getEnumTypes().get(0);
    }

    private static final TimestampGranularity[] VALUES = values();

    public static TimestampGranularity valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private TimestampGranularity(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:google.bigtable.admin.v2.Table.TimestampGranularity)
  }

  /**
   * Protobuf enum {@code google.bigtable.admin.v2.Table.View}
   *
   * <pre>
   * Defines a view over a table's fields.
   * </pre>
   */
  public enum View
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>VIEW_UNSPECIFIED = 0;</code>
     *
     * <pre>
     * Uses the default view for each method as documented in its request.
     * </pre>
     */
    VIEW_UNSPECIFIED(0, 0),
    /**
     * <code>NAME_ONLY = 1;</code>
     *
     * <pre>
     * Only populates `name`.
     * </pre>
     */
    NAME_ONLY(1, 1),
    /**
     * <code>SCHEMA_VIEW = 2;</code>
     *
     * <pre>
     * Only populates `name` and fields related to the table's schema.
     * </pre>
     */
    SCHEMA_VIEW(2, 2),
    /**
     * <code>REPLICATION_VIEW = 3;</code>
     *
     * <pre>
     * Only populates `name` and fields related to the table's
     * replication state.
     * </pre>
     */
    REPLICATION_VIEW(3, 3),
    /**
     * <code>FULL = 4;</code>
     *
     * <pre>
     * Populates all fields.
     * </pre>
     */
    FULL(4, 4),
    UNRECOGNIZED(-1, -1),
    ;

    /**
     * <code>VIEW_UNSPECIFIED = 0;</code>
     *
     * <pre>
     * Uses the default view for each method as documented in its request.
     * </pre>
     */
    public static final int VIEW_UNSPECIFIED_VALUE = 0;
    /**
     * <code>NAME_ONLY = 1;</code>
     *
     * <pre>
     * Only populates `name`.
     * </pre>
     */
    public static final int NAME_ONLY_VALUE = 1;
    /**
     * <code>SCHEMA_VIEW = 2;</code>
     *
     * <pre>
     * Only populates `name` and fields related to the table's schema.
     * </pre>
     */
    public static final int SCHEMA_VIEW_VALUE = 2;
    /**
     * <code>REPLICATION_VIEW = 3;</code>
     *
     * <pre>
     * Only populates `name` and fields related to the table's
     * replication state.
     * </pre>
     */
    public static final int REPLICATION_VIEW_VALUE = 3;
    /**
     * <code>FULL = 4;</code>
     *
     * <pre>
     * Populates all fields.
     * </pre>
     */
    public static final int FULL_VALUE = 4;


    public final int getNumber() {
      if (index == -1) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    public static View valueOf(int value) {
      switch (value) {
        case 0: return VIEW_UNSPECIFIED;
        case 1: return NAME_ONLY;
        case 2: return SCHEMA_VIEW;
        case 3: return REPLICATION_VIEW;
        case 4: return FULL;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<View>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        View> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<View>() {
            public View findValueByNumber(int number) {
              return View.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.google.bigtable.admin.v2.Table.getDescriptor().getEnumTypes().get(1);
    }

    private static final View[] VALUES = values();

    public static View valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private View(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:google.bigtable.admin.v2.Table.View)
  }

  public interface ClusterStateOrBuilder extends
      // @@protoc_insertion_point(interface_extends:google.bigtable.admin.v2.Table.ClusterState)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional .google.bigtable.admin.v2.Table.ClusterState.ReplicationState replication_state = 1;</code>
     *
     * <pre>
     * The state of replication for the table in this cluster.
     * &#64;OutputOnly
     * </pre>
     */
    int getReplicationStateValue();
    /**
     * <code>optional .google.bigtable.admin.v2.Table.ClusterState.ReplicationState replication_state = 1;</code>
     *
     * <pre>
     * The state of replication for the table in this cluster.
     * &#64;OutputOnly
     * </pre>
     */
    com.google.bigtable.admin.v2.Table.ClusterState.ReplicationState getReplicationState();
  }
  /**
   * Protobuf type {@code google.bigtable.admin.v2.Table.ClusterState}
   *
   * <pre>
   * The state of a table's data in a particular cluster.
   * </pre>
   */
  public  static final class ClusterState extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:google.bigtable.admin.v2.Table.ClusterState)
      ClusterStateOrBuilder {
    // Use ClusterState.newBuilder() to construct.
    private ClusterState(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private ClusterState() {
      replicationState_ = 0;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private ClusterState(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();

              replicationState_ = rawValue;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw new RuntimeException(e.setUnfinishedMessage(this));
      } catch (java.io.IOException e) {
        throw new RuntimeException(
            new com.google.protobuf.InvalidProtocolBufferException(
                e.getMessage()).setUnfinishedMessage(this));
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.bigtable.admin.v2.TableProto.internal_static_google_bigtable_admin_v2_Table_ClusterState_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.bigtable.admin.v2.TableProto.internal_static_google_bigtable_admin_v2_Table_ClusterState_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.bigtable.admin.v2.Table.ClusterState.class, com.google.bigtable.admin.v2.Table.ClusterState.Builder.class);
    }

    /**
     * Protobuf enum {@code google.bigtable.admin.v2.Table.ClusterState.ReplicationState}
     */
    public enum ReplicationState
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>STATE_NOT_KNOWN = 0;</code>
       *
       * <pre>
       * The replication state of the table is unknown in this cluster.
       * </pre>
       */
      STATE_NOT_KNOWN(0, 0),
      /**
       * <code>INITIALIZING = 1;</code>
       *
       * <pre>
       * The cluster was recently created, and the table must finish copying
       * over pre-existing data from other clusters before it can begin
       * receiving live replication updates and serving
       * [Data API][google.bigtable.v2.BigtableService] requests.
       * </pre>
       */
      INITIALIZING(1, 1),
      /**
       * <code>PLANNED_MAINTENANCE = 2;</code>
       *
       * <pre>
       * The table is temporarily unable to serve
       * [Data API][google.bigtable.v2.BigtableService] requests from this
       * cluster due to planned internal maintenance.
       * </pre>
       */
      PLANNED_MAINTENANCE(2, 2),
      /**
       * <code>UNPLANNED_MAINTENANCE = 3;</code>
       *
       * <pre>
       * The table is temporarily unable to serve
       * [Data API][google.bigtable.v2.BigtableService] requests from this
       * cluster due to unplanned or emergency maintenance.
       * </pre>
       */
      UNPLANNED_MAINTENANCE(3, 3),
      /**
       * <code>READY = 4;</code>
       *
       * <pre>
       * The table can serve
       * [Data API][google.bigtable.v2.BigtableService] requests from this
       * cluster. Depending on replication delay, reads may not immediately
       * reflect the state of the table in other clusters.
       * </pre>
       */
      READY(4, 4),
      UNRECOGNIZED(-1, -1),
      ;

      /**
       * <code>STATE_NOT_KNOWN = 0;</code>
       *
       * <pre>
       * The replication state of the table is unknown in this cluster.
       * </pre>
       */
      public static final int STATE_NOT_KNOWN_VALUE = 0;
      /**
       * <code>INITIALIZING = 1;</code>
       *
       * <pre>
       * The cluster was recently created, and the table must finish copying
       * over pre-existing data from other clusters before it can begin
       * receiving live replication updates and serving
       * [Data API][google.bigtable.v2.BigtableService] requests.
       * </pre>
       */
      public static final int INITIALIZING_VALUE = 1;
      /**
       * <code>PLANNED_MAINTENANCE = 2;</code>
       *
       * <pre>
       * The table is temporarily unable to serve
       * [Data API][google.bigtable.v2.BigtableService] requests from this
       * cluster due to planned internal maintenance.
       * </pre>
       */
      public static final int PLANNED_MAINTENANCE_VALUE = 2;
      /**
       * <code>UNPLANNED_MAINTENANCE = 3;</code>
       *
       * <pre>
       * The table is temporarily unable to serve
       * [Data API][google.bigtable.v2.BigtableService] requests from this
       * cluster due to unplanned or emergency maintenance.
       * </pre>
       */
      public static final int UNPLANNED_MAINTENANCE_VALUE = 3;
      /**
       * <code>READY = 4;</code>
       *
       * <pre>
       * The table can serve
       * [Data API][google.bigtable.v2.BigtableService] requests from this
       * cluster. Depending on replication delay, reads may not immediately
       * reflect the state of the table in other clusters.
       * </pre>
       */
      public static final int READY_VALUE = 4;


      public final int getNumber() {
        if (index == -1) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      public static ReplicationState valueOf(int value) {
        switch (value) {
          case 0: return STATE_NOT_KNOWN;
          case 1: return INITIALIZING;
          case 2: return PLANNED_MAINTENANCE;
          case 3: return UNPLANNED_MAINTENANCE;
          case 4: return READY;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<ReplicationState>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          ReplicationState> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<ReplicationState>() {
              public ReplicationState findValueByNumber(int number) {
                return ReplicationState.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.google.bigtable.admin.v2.Table.ClusterState.getDescriptor().getEnumTypes().get(0);
      }

      private static final ReplicationState[] VALUES = values();

      public static ReplicationState valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private ReplicationState(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:google.bigtable.admin.v2.Table.ClusterState.ReplicationState)
    }

    public static final int REPLICATION_STATE_FIELD_NUMBER = 1;
    private int replicationState_;
    /**
     * <code>optional .google.bigtable.admin.v2.Table.ClusterState.ReplicationState replication_state = 1;</code>
     *
     * <pre>
     * The state of replication for the table in this cluster.
     * &#64;OutputOnly
     * </pre>
     */
    public int getReplicationStateValue() {
      return replicationState_;
    }
    /**
     * <code>optional .google.bigtable.admin.v2.Table.ClusterState.ReplicationState replication_state = 1;</code>
     *
     * <pre>
     * The state of replication for the table in this cluster.
     * &#64;OutputOnly
     * </pre>
     */
    public com.google.bigtable.admin.v2.Table.ClusterState.ReplicationState getReplicationState() {
      com.google.bigtable.admin.v2.Table.ClusterState.ReplicationState result = com.google.bigtable.admin.v2.Table.ClusterState.ReplicationState.valueOf(replicationState_);
      return result == null ? com.google.bigtable.admin.v2.Table.ClusterState.ReplicationState.UNRECOGNIZED : result;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (replicationState_ != com.google.bigtable.admin.v2.Table.ClusterState.ReplicationState.STATE_NOT_KNOWN.getNumber()) {
        output.writeEnum(1, replicationState_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (replicationState_ != com.google.bigtable.admin.v2.Table.ClusterState.ReplicationState.STATE_NOT_KNOWN.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, replicationState_);
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    public static com.google.bigtable.admin.v2.Table.ClusterState parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.bigtable.admin.v2.Table.ClusterState parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.bigtable.admin.v2.Table.ClusterState parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.bigtable.admin.v2.Table.ClusterState parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.bigtable.admin.v2.Table.ClusterState parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.google.bigtable.admin.v2.Table.ClusterState parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.google.bigtable.admin.v2.Table.ClusterState parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.google.bigtable.admin.v2.Table.ClusterState parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.google.bigtable.admin.v2.Table.ClusterState parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.google.bigtable.admin.v2.Table.ClusterState parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.google.bigtable.admin.v2.Table.ClusterState prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code google.bigtable.admin.v2.Table.ClusterState}
     *
     * <pre>
     * The state of a table's data in a particular cluster.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:google.bigtable.admin.v2.Table.ClusterState)
        com.google.bigtable.admin.v2.Table.ClusterStateOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.google.bigtable.admin.v2.TableProto.internal_static_google_bigtable_admin_v2_Table_ClusterState_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.bigtable.admin.v2.TableProto.internal_static_google_bigtable_admin_v2_Table_ClusterState_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.bigtable.admin.v2.Table.ClusterState.class, com.google.bigtable.admin.v2.Table.ClusterState.Builder.class);
      }

      // Construct using com.google.bigtable.admin.v2.Table.ClusterState.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        replicationState_ = 0;

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.google.bigtable.admin.v2.TableProto.internal_static_google_bigtable_admin_v2_Table_ClusterState_descriptor;
      }

      public com.google.bigtable.admin.v2.Table.ClusterState getDefaultInstanceForType() {
        return com.google.bigtable.admin.v2.Table.ClusterState.getDefaultInstance();
      }

      public com.google.bigtable.admin.v2.Table.ClusterState build() {
        com.google.bigtable.admin.v2.Table.ClusterState result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.google.bigtable.admin.v2.Table.ClusterState buildPartial() {
        com.google.bigtable.admin.v2.Table.ClusterState result = new com.google.bigtable.admin.v2.Table.ClusterState(this);
        result.replicationState_ = replicationState_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.google.bigtable.admin.v2.Table.ClusterState) {
          return mergeFrom((com.google.bigtable.admin.v2.Table.ClusterState)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.google.bigtable.admin.v2.Table.ClusterState other) {
        if (other == com.google.bigtable.admin.v2.Table.ClusterState.getDefaultInstance()) return this;
        if (other.replicationState_ != 0) {
          setReplicationStateValue(other.getReplicationStateValue());
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.bigtable.admin.v2.Table.ClusterState parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.google.bigtable.admin.v2.Table.ClusterState) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int replicationState_ = 0;
      /**
       * <code>optional .google.bigtable.admin.v2.Table.ClusterState.ReplicationState replication_state = 1;</code>
       *
       * <pre>
       * The state of replication for the table in this cluster.
       * &#64;OutputOnly
       * </pre>
       */
      public int getReplicationStateValue() {
        return replicationState_;
      }
      /**
       * <code>optional .google.bigtable.admin.v2.Table.ClusterState.ReplicationState replication_state = 1;</code>
       *
       * <pre>
       * The state of replication for the table in this cluster.
       * &#64;OutputOnly
       * </pre>
       */
      public Builder setReplicationStateValue(int value) {
        replicationState_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .google.bigtable.admin.v2.Table.ClusterState.ReplicationState replication_state = 1;</code>
       *
       * <pre>
       * The state of replication for the table in this cluster.
       * &#64;OutputOnly
       * </pre>
       */
      public com.google.bigtable.admin.v2.Table.ClusterState.ReplicationState getReplicationState() {
        com.google.bigtable.admin.v2.Table.ClusterState.ReplicationState result = com.google.bigtable.admin.v2.Table.ClusterState.ReplicationState.valueOf(replicationState_);
        return result == null ? com.google.bigtable.admin.v2.Table.ClusterState.ReplicationState.UNRECOGNIZED : result;
      }
      /**
       * <code>optional .google.bigtable.admin.v2.Table.ClusterState.ReplicationState replication_state = 1;</code>
       *
       * <pre>
       * The state of replication for the table in this cluster.
       * &#64;OutputOnly
       * </pre>
       */
      public Builder setReplicationState(com.google.bigtable.admin.v2.Table.ClusterState.ReplicationState value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        replicationState_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>optional .google.bigtable.admin.v2.Table.ClusterState.ReplicationState replication_state = 1;</code>
       *
       * <pre>
       * The state of replication for the table in this cluster.
       * &#64;OutputOnly
       * </pre>
       */
      public Builder clearReplicationState() {
        
        replicationState_ = 0;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:google.bigtable.admin.v2.Table.ClusterState)
    }

    // @@protoc_insertion_point(class_scope:google.bigtable.admin.v2.Table.ClusterState)
    private static final com.google.bigtable.admin.v2.Table.ClusterState DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.google.bigtable.admin.v2.Table.ClusterState();
    }

    public static com.google.bigtable.admin.v2.Table.ClusterState getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ClusterState>
        PARSER = new com.google.protobuf.AbstractParser<ClusterState>() {
      public ClusterState parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        try {
          return new ClusterState(input, extensionRegistry);
        } catch (RuntimeException e) {
          if (e.getCause() instanceof
              com.google.protobuf.InvalidProtocolBufferException) {
            throw (com.google.protobuf.InvalidProtocolBufferException)
                e.getCause();
          }
          throw e;
        }
      }
    };

    public static com.google.protobuf.Parser<ClusterState> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ClusterState> getParserForType() {
      return PARSER;
    }

    public com.google.bigtable.admin.v2.Table.ClusterState getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private int bitField0_;
  public static final int NAME_FIELD_NUMBER = 1;
  private volatile java.lang.Object name_;
  /**
   * <code>optional string name = 1;</code>
   *
   * <pre>
   * The unique name of the table. Values are of the form
   * projects/&lt;project&gt;/instances/&lt;instance&gt;/tables/[_a-zA-Z0-9][-_.a-zA-Z0-9]*
   * Views: NAME_ONLY, SCHEMA_VIEW, REPLICATION_VIEW, FULL
   * &#64;OutputOnly
   * </pre>
   */
  public java.lang.String getName() {
    java.lang.Object ref = name_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      name_ = s;
      return s;
    }
  }
  /**
   * <code>optional string name = 1;</code>
   *
   * <pre>
   * The unique name of the table. Values are of the form
   * projects/&lt;project&gt;/instances/&lt;instance&gt;/tables/[_a-zA-Z0-9][-_.a-zA-Z0-9]*
   * Views: NAME_ONLY, SCHEMA_VIEW, REPLICATION_VIEW, FULL
   * &#64;OutputOnly
   * </pre>
   */
  public com.google.protobuf.ByteString
      getNameBytes() {
    java.lang.Object ref = name_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      name_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int CLUSTER_STATES_FIELD_NUMBER = 2;
  private static final class ClusterStatesDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        java.lang.String, com.google.bigtable.admin.v2.Table.ClusterState> defaultEntry =
            com.google.protobuf.MapEntry
            .<java.lang.String, com.google.bigtable.admin.v2.Table.ClusterState>newDefaultInstance(
                com.google.bigtable.admin.v2.TableProto.internal_static_google_bigtable_admin_v2_Table_ClusterStatesEntry_descriptor, 
                com.google.protobuf.WireFormat.FieldType.STRING,
                "",
                com.google.protobuf.WireFormat.FieldType.MESSAGE,
                com.google.bigtable.admin.v2.Table.ClusterState.getDefaultInstance());
  }
  private com.google.protobuf.MapField<
      java.lang.String, com.google.bigtable.admin.v2.Table.ClusterState> clusterStates_;
  private com.google.protobuf.MapField<java.lang.String, com.google.bigtable.admin.v2.Table.ClusterState>
  internalGetClusterStates() {
    if (clusterStates_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          ClusterStatesDefaultEntryHolder.defaultEntry);
   }
    return clusterStates_;
  }
  /**
   * <code>map&lt;string, .google.bigtable.admin.v2.Table.ClusterState&gt; cluster_states = 2;</code>
   *
   * <pre>
   * Map from cluster ID to per-cluster table state.
   * If it could not be determined whether or not the table has data in a
   * particular cluster (for example, if its zone is unavailable), then
   * there will be an entry for the cluster with UNKNOWN `replication_status`.
   * Views: REPLICATION_VIEW, FULL
   * &#64;OutputOnly
   * </pre>
   */

  public java.util.Map<java.lang.String, com.google.bigtable.admin.v2.Table.ClusterState> getClusterStates() {
    return internalGetClusterStates().getMap();
  }

  public static final int COLUMN_FAMILIES_FIELD_NUMBER = 3;
  private static final class ColumnFamiliesDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        java.lang.String, com.google.bigtable.admin.v2.ColumnFamily> defaultEntry =
            com.google.protobuf.MapEntry
            .<java.lang.String, com.google.bigtable.admin.v2.ColumnFamily>newDefaultInstance(
                com.google.bigtable.admin.v2.TableProto.internal_static_google_bigtable_admin_v2_Table_ColumnFamiliesEntry_descriptor, 
                com.google.protobuf.WireFormat.FieldType.STRING,
                "",
                com.google.protobuf.WireFormat.FieldType.MESSAGE,
                com.google.bigtable.admin.v2.ColumnFamily.getDefaultInstance());
  }
  private com.google.protobuf.MapField<
      java.lang.String, com.google.bigtable.admin.v2.ColumnFamily> columnFamilies_;
  private com.google.protobuf.MapField<java.lang.String, com.google.bigtable.admin.v2.ColumnFamily>
  internalGetColumnFamilies() {
    if (columnFamilies_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          ColumnFamiliesDefaultEntryHolder.defaultEntry);
   }
    return columnFamilies_;
  }
  /**
   * <code>map&lt;string, .google.bigtable.admin.v2.ColumnFamily&gt; column_families = 3;</code>
   *
   * <pre>
   * The column families configured for this table, mapped by column family ID.
   * Views: SCHEMA_VIEW, FULL
   * &#64;CreationOnly
   * </pre>
   */

  public java.util.Map<java.lang.String, com.google.bigtable.admin.v2.ColumnFamily> getColumnFamilies() {
    return internalGetColumnFamilies().getMap();
  }

  public static final int GRANULARITY_FIELD_NUMBER = 4;
  private int granularity_;
  /**
   * <code>optional .google.bigtable.admin.v2.Table.TimestampGranularity granularity = 4;</code>
   *
   * <pre>
   * The granularity (e.g. MILLIS, MICROS) at which timestamps are stored in
   * this table. Timestamps not matching the granularity will be rejected.
   * If unspecified at creation time, the value will be set to MILLIS.
   * Views: SCHEMA_VIEW, FULL
   * &#64;CreationOnly
   * </pre>
   */
  public int getGranularityValue() {
    return granularity_;
  }
  /**
   * <code>optional .google.bigtable.admin.v2.Table.TimestampGranularity granularity = 4;</code>
   *
   * <pre>
   * The granularity (e.g. MILLIS, MICROS) at which timestamps are stored in
   * this table. Timestamps not matching the granularity will be rejected.
   * If unspecified at creation time, the value will be set to MILLIS.
   * Views: SCHEMA_VIEW, FULL
   * &#64;CreationOnly
   * </pre>
   */
  public com.google.bigtable.admin.v2.Table.TimestampGranularity getGranularity() {
    com.google.bigtable.admin.v2.Table.TimestampGranularity result = com.google.bigtable.admin.v2.Table.TimestampGranularity.valueOf(granularity_);
    return result == null ? com.google.bigtable.admin.v2.Table.TimestampGranularity.UNRECOGNIZED : result;
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!getNameBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessage.writeString(output, 1, name_);
    }
    for (java.util.Map.Entry<java.lang.String, com.google.bigtable.admin.v2.Table.ClusterState> entry
         : internalGetClusterStates().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.String, com.google.bigtable.admin.v2.Table.ClusterState>
      clusterStates = ClusterStatesDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      output.writeMessage(2, clusterStates);
    }
    for (java.util.Map.Entry<java.lang.String, com.google.bigtable.admin.v2.ColumnFamily> entry
         : internalGetColumnFamilies().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.String, com.google.bigtable.admin.v2.ColumnFamily>
      columnFamilies = ColumnFamiliesDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      output.writeMessage(3, columnFamilies);
    }
    if (granularity_ != com.google.bigtable.admin.v2.Table.TimestampGranularity.TIMESTAMP_GRANULARITY_UNSPECIFIED.getNumber()) {
      output.writeEnum(4, granularity_);
    }
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!getNameBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessage.computeStringSize(1, name_);
    }
    for (java.util.Map.Entry<java.lang.String, com.google.bigtable.admin.v2.Table.ClusterState> entry
         : internalGetClusterStates().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.String, com.google.bigtable.admin.v2.Table.ClusterState>
      clusterStates = ClusterStatesDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, clusterStates);
    }
    for (java.util.Map.Entry<java.lang.String, com.google.bigtable.admin.v2.ColumnFamily> entry
         : internalGetColumnFamilies().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.String, com.google.bigtable.admin.v2.ColumnFamily>
      columnFamilies = ColumnFamiliesDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, columnFamilies);
    }
    if (granularity_ != com.google.bigtable.admin.v2.Table.TimestampGranularity.TIMESTAMP_GRANULARITY_UNSPECIFIED.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(4, granularity_);
    }
    memoizedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  public static com.google.bigtable.admin.v2.Table parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.bigtable.admin.v2.Table parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.bigtable.admin.v2.Table parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.bigtable.admin.v2.Table parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.bigtable.admin.v2.Table parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static com.google.bigtable.admin.v2.Table parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }
  public static com.google.bigtable.admin.v2.Table parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input);
  }
  public static com.google.bigtable.admin.v2.Table parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input, extensionRegistry);
  }
  public static com.google.bigtable.admin.v2.Table parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static com.google.bigtable.admin.v2.Table parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.bigtable.admin.v2.Table prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessage.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code google.bigtable.admin.v2.Table}
   *
   * <pre>
   * A collection of user data indexed by row, column, and timestamp.
   * Each table is served using the resources of its parent cluster.
   * </pre>
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessage.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:google.bigtable.admin.v2.Table)
      com.google.bigtable.admin.v2.TableOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.bigtable.admin.v2.TableProto.internal_static_google_bigtable_admin_v2_Table_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 2:
          return internalGetClusterStates();
        case 3:
          return internalGetColumnFamilies();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMutableMapField(
        int number) {
      switch (number) {
        case 2:
          return internalGetMutableClusterStates();
        case 3:
          return internalGetMutableColumnFamilies();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.bigtable.admin.v2.TableProto.internal_static_google_bigtable_admin_v2_Table_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.bigtable.admin.v2.Table.class, com.google.bigtable.admin.v2.Table.Builder.class);
    }

    // Construct using com.google.bigtable.admin.v2.Table.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
      }
    }
    public Builder clear() {
      super.clear();
      name_ = "";

      internalGetMutableClusterStates().clear();
      internalGetMutableColumnFamilies().clear();
      granularity_ = 0;

      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.bigtable.admin.v2.TableProto.internal_static_google_bigtable_admin_v2_Table_descriptor;
    }

    public com.google.bigtable.admin.v2.Table getDefaultInstanceForType() {
      return com.google.bigtable.admin.v2.Table.getDefaultInstance();
    }

    public com.google.bigtable.admin.v2.Table build() {
      com.google.bigtable.admin.v2.Table result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public com.google.bigtable.admin.v2.Table buildPartial() {
      com.google.bigtable.admin.v2.Table result = new com.google.bigtable.admin.v2.Table(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      result.name_ = name_;
      result.clusterStates_ = internalGetClusterStates();
      result.clusterStates_.makeImmutable();
      result.columnFamilies_ = internalGetColumnFamilies();
      result.columnFamilies_.makeImmutable();
      result.granularity_ = granularity_;
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.bigtable.admin.v2.Table) {
        return mergeFrom((com.google.bigtable.admin.v2.Table)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.bigtable.admin.v2.Table other) {
      if (other == com.google.bigtable.admin.v2.Table.getDefaultInstance()) return this;
      if (!other.getName().isEmpty()) {
        name_ = other.name_;
        onChanged();
      }
      internalGetMutableClusterStates().mergeFrom(
          other.internalGetClusterStates());
      internalGetMutableColumnFamilies().mergeFrom(
          other.internalGetColumnFamilies());
      if (other.granularity_ != 0) {
        setGranularityValue(other.getGranularityValue());
      }
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.google.bigtable.admin.v2.Table parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.google.bigtable.admin.v2.Table) e.getUnfinishedMessage();
        throw e;
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.lang.Object name_ = "";
    /**
     * <code>optional string name = 1;</code>
     *
     * <pre>
     * The unique name of the table. Values are of the form
     * projects/&lt;project&gt;/instances/&lt;instance&gt;/tables/[_a-zA-Z0-9][-_.a-zA-Z0-9]*
     * Views: NAME_ONLY, SCHEMA_VIEW, REPLICATION_VIEW, FULL
     * &#64;OutputOnly
     * </pre>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <code>optional string name = 1;</code>
     *
     * <pre>
     * The unique name of the table. Values are of the form
     * projects/&lt;project&gt;/instances/&lt;instance&gt;/tables/[_a-zA-Z0-9][-_.a-zA-Z0-9]*
     * Views: NAME_ONLY, SCHEMA_VIEW, REPLICATION_VIEW, FULL
     * &#64;OutputOnly
     * </pre>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <code>optional string name = 1;</code>
     *
     * <pre>
     * The unique name of the table. Values are of the form
     * projects/&lt;project&gt;/instances/&lt;instance&gt;/tables/[_a-zA-Z0-9][-_.a-zA-Z0-9]*
     * Views: NAME_ONLY, SCHEMA_VIEW, REPLICATION_VIEW, FULL
     * &#64;OutputOnly
     * </pre>
     */
    public Builder setName(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      name_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional string name = 1;</code>
     *
     * <pre>
     * The unique name of the table. Values are of the form
     * projects/&lt;project&gt;/instances/&lt;instance&gt;/tables/[_a-zA-Z0-9][-_.a-zA-Z0-9]*
     * Views: NAME_ONLY, SCHEMA_VIEW, REPLICATION_VIEW, FULL
     * &#64;OutputOnly
     * </pre>
     */
    public Builder clearName() {
      
      name_ = getDefaultInstance().getName();
      onChanged();
      return this;
    }
    /**
     * <code>optional string name = 1;</code>
     *
     * <pre>
     * The unique name of the table. Values are of the form
     * projects/&lt;project&gt;/instances/&lt;instance&gt;/tables/[_a-zA-Z0-9][-_.a-zA-Z0-9]*
     * Views: NAME_ONLY, SCHEMA_VIEW, REPLICATION_VIEW, FULL
     * &#64;OutputOnly
     * </pre>
     */
    public Builder setNameBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      name_ = value;
      onChanged();
      return this;
    }

    private com.google.protobuf.MapField<
        java.lang.String, com.google.bigtable.admin.v2.Table.ClusterState> clusterStates_;
    private com.google.protobuf.MapField<java.lang.String, com.google.bigtable.admin.v2.Table.ClusterState>
    internalGetClusterStates() {
      if (clusterStates_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            ClusterStatesDefaultEntryHolder.defaultEntry);
     }
      return clusterStates_;
    }
    private com.google.protobuf.MapField<java.lang.String, com.google.bigtable.admin.v2.Table.ClusterState>
    internalGetMutableClusterStates() {
      onChanged();;
      if (clusterStates_ == null) {
        clusterStates_ = com.google.protobuf.MapField.newMapField(
            ClusterStatesDefaultEntryHolder.defaultEntry);
      }
      if (!clusterStates_.isMutable()) {
        clusterStates_ = clusterStates_.copy();
      }
      return clusterStates_;
    }
    /**
     * <code>map&lt;string, .google.bigtable.admin.v2.Table.ClusterState&gt; cluster_states = 2;</code>
     *
     * <pre>
     * Map from cluster ID to per-cluster table state.
     * If it could not be determined whether or not the table has data in a
     * particular cluster (for example, if its zone is unavailable), then
     * there will be an entry for the cluster with UNKNOWN `replication_status`.
     * Views: REPLICATION_VIEW, FULL
     * &#64;OutputOnly
     * </pre>
     */
    public java.util.Map<java.lang.String, com.google.bigtable.admin.v2.Table.ClusterState> getClusterStates() {
      return internalGetClusterStates().getMap();
    }
    /**
     * <code>map&lt;string, .google.bigtable.admin.v2.Table.ClusterState&gt; cluster_states = 2;</code>
     *
     * <pre>
     * Map from cluster ID to per-cluster table state.
     * If it could not be determined whether or not the table has data in a
     * particular cluster (for example, if its zone is unavailable), then
     * there will be an entry for the cluster with UNKNOWN `replication_status`.
     * Views: REPLICATION_VIEW, FULL
     * &#64;OutputOnly
     * </pre>
     */
    public java.util.Map<java.lang.String, com.google.bigtable.admin.v2.Table.ClusterState>
    getMutableClusterStates() {
      return internalGetMutableClusterStates().getMutableMap();
    }
    /**
     * <code>map&lt;string, .google.bigtable.admin.v2.Table.ClusterState&gt; cluster_states = 2;</code>
     *
     * <pre>
     * Map from cluster ID to per-cluster table state.
     * If it could not be determined whether or not the table has data in a
     * particular cluster (for example, if its zone is unavailable), then
     * there will be an entry for the cluster with UNKNOWN `replication_status`.
     * Views: REPLICATION_VIEW, FULL
     * &#64;OutputOnly
     * </pre>
     */
    public Builder putAllClusterStates(
        java.util.Map<java.lang.String, com.google.bigtable.admin.v2.Table.ClusterState> values) {
      getMutableClusterStates().putAll(values);
      return this;
    }

    private com.google.protobuf.MapField<
        java.lang.String, com.google.bigtable.admin.v2.ColumnFamily> columnFamilies_;
    private com.google.protobuf.MapField<java.lang.String, com.google.bigtable.admin.v2.ColumnFamily>
    internalGetColumnFamilies() {
      if (columnFamilies_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            ColumnFamiliesDefaultEntryHolder.defaultEntry);
     }
      return columnFamilies_;
    }
    private com.google.protobuf.MapField<java.lang.String, com.google.bigtable.admin.v2.ColumnFamily>
    internalGetMutableColumnFamilies() {
      onChanged();;
      if (columnFamilies_ == null) {
        columnFamilies_ = com.google.protobuf.MapField.newMapField(
            ColumnFamiliesDefaultEntryHolder.defaultEntry);
      }
      if (!columnFamilies_.isMutable()) {
        columnFamilies_ = columnFamilies_.copy();
      }
      return columnFamilies_;
    }
    /**
     * <code>map&lt;string, .google.bigtable.admin.v2.ColumnFamily&gt; column_families = 3;</code>
     *
     * <pre>
     * The column families configured for this table, mapped by column family ID.
     * Views: SCHEMA_VIEW, FULL
     * &#64;CreationOnly
     * </pre>
     */
    public java.util.Map<java.lang.String, com.google.bigtable.admin.v2.ColumnFamily> getColumnFamilies() {
      return internalGetColumnFamilies().getMap();
    }
    /**
     * <code>map&lt;string, .google.bigtable.admin.v2.ColumnFamily&gt; column_families = 3;</code>
     *
     * <pre>
     * The column families configured for this table, mapped by column family ID.
     * Views: SCHEMA_VIEW, FULL
     * &#64;CreationOnly
     * </pre>
     */
    public java.util.Map<java.lang.String, com.google.bigtable.admin.v2.ColumnFamily>
    getMutableColumnFamilies() {
      return internalGetMutableColumnFamilies().getMutableMap();
    }
    /**
     * <code>map&lt;string, .google.bigtable.admin.v2.ColumnFamily&gt; column_families = 3;</code>
     *
     * <pre>
     * The column families configured for this table, mapped by column family ID.
     * Views: SCHEMA_VIEW, FULL
     * &#64;CreationOnly
     * </pre>
     */
    public Builder putAllColumnFamilies(
        java.util.Map<java.lang.String, com.google.bigtable.admin.v2.ColumnFamily> values) {
      getMutableColumnFamilies().putAll(values);
      return this;
    }

    private int granularity_ = 0;
    /**
     * <code>optional .google.bigtable.admin.v2.Table.TimestampGranularity granularity = 4;</code>
     *
     * <pre>
     * The granularity (e.g. MILLIS, MICROS) at which timestamps are stored in
     * this table. Timestamps not matching the granularity will be rejected.
     * If unspecified at creation time, the value will be set to MILLIS.
     * Views: SCHEMA_VIEW, FULL
     * &#64;CreationOnly
     * </pre>
     */
    public int getGranularityValue() {
      return granularity_;
    }
    /**
     * <code>optional .google.bigtable.admin.v2.Table.TimestampGranularity granularity = 4;</code>
     *
     * <pre>
     * The granularity (e.g. MILLIS, MICROS) at which timestamps are stored in
     * this table. Timestamps not matching the granularity will be rejected.
     * If unspecified at creation time, the value will be set to MILLIS.
     * Views: SCHEMA_VIEW, FULL
     * &#64;CreationOnly
     * </pre>
     */
    public Builder setGranularityValue(int value) {
      granularity_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional .google.bigtable.admin.v2.Table.TimestampGranularity granularity = 4;</code>
     *
     * <pre>
     * The granularity (e.g. MILLIS, MICROS) at which timestamps are stored in
     * this table. Timestamps not matching the granularity will be rejected.
     * If unspecified at creation time, the value will be set to MILLIS.
     * Views: SCHEMA_VIEW, FULL
     * &#64;CreationOnly
     * </pre>
     */
    public com.google.bigtable.admin.v2.Table.TimestampGranularity getGranularity() {
      com.google.bigtable.admin.v2.Table.TimestampGranularity result = com.google.bigtable.admin.v2.Table.TimestampGranularity.valueOf(granularity_);
      return result == null ? com.google.bigtable.admin.v2.Table.TimestampGranularity.UNRECOGNIZED : result;
    }
    /**
     * <code>optional .google.bigtable.admin.v2.Table.TimestampGranularity granularity = 4;</code>
     *
     * <pre>
     * The granularity (e.g. MILLIS, MICROS) at which timestamps are stored in
     * this table. Timestamps not matching the granularity will be rejected.
     * If unspecified at creation time, the value will be set to MILLIS.
     * Views: SCHEMA_VIEW, FULL
     * &#64;CreationOnly
     * </pre>
     */
    public Builder setGranularity(com.google.bigtable.admin.v2.Table.TimestampGranularity value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      granularity_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <code>optional .google.bigtable.admin.v2.Table.TimestampGranularity granularity = 4;</code>
     *
     * <pre>
     * The granularity (e.g. MILLIS, MICROS) at which timestamps are stored in
     * this table. Timestamps not matching the granularity will be rejected.
     * If unspecified at creation time, the value will be set to MILLIS.
     * Views: SCHEMA_VIEW, FULL
     * &#64;CreationOnly
     * </pre>
     */
    public Builder clearGranularity() {
      
      granularity_ = 0;
      onChanged();
      return this;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }


    // @@protoc_insertion_point(builder_scope:google.bigtable.admin.v2.Table)
  }

  // @@protoc_insertion_point(class_scope:google.bigtable.admin.v2.Table)
  private static final com.google.bigtable.admin.v2.Table DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.bigtable.admin.v2.Table();
  }

  public static com.google.bigtable.admin.v2.Table getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Table>
      PARSER = new com.google.protobuf.AbstractParser<Table>() {
    public Table parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      try {
        return new Table(input, extensionRegistry);
      } catch (RuntimeException e) {
        if (e.getCause() instanceof
            com.google.protobuf.InvalidProtocolBufferException) {
          throw (com.google.protobuf.InvalidProtocolBufferException)
              e.getCause();
        }
        throw e;
      }
    }
  };

  public static com.google.protobuf.Parser<Table> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Table> getParserForType() {
    return PARSER;
  }

  public com.google.bigtable.admin.v2.Table getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}


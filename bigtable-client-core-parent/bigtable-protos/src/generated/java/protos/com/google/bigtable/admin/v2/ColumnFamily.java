// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/bigtable/admin/v2/table.proto

package com.google.bigtable.admin.v2;

/**
 * Protobuf type {@code google.bigtable.admin.v2.ColumnFamily}
 *
 * <pre>
 * A set of columns within a table which share a common configuration.
 * </pre>
 */
public  final class ColumnFamily extends
    com.google.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:google.bigtable.admin.v2.ColumnFamily)
    ColumnFamilyOrBuilder {
  // Use ColumnFamily.newBuilder() to construct.
  private ColumnFamily(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
    super(builder);
  }
  private ColumnFamily() {
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
  }
  private ColumnFamily(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
    this();
    int mutable_bitField0_ = 0;
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!input.skipField(tag)) {
              done = true;
            }
            break;
          }
          case 10: {
            com.google.bigtable.admin.v2.GcRule.Builder subBuilder = null;
            if (gcRule_ != null) {
              subBuilder = gcRule_.toBuilder();
            }
            gcRule_ = input.readMessage(com.google.bigtable.admin.v2.GcRule.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(gcRule_);
              gcRule_ = subBuilder.buildPartial();
            }

            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw new RuntimeException(e.setUnfinishedMessage(this));
    } catch (java.io.IOException e) {
      throw new RuntimeException(
          new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this));
    } finally {
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.bigtable.admin.v2.TableProto.internal_static_google_bigtable_admin_v2_ColumnFamily_descriptor;
  }

  protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.bigtable.admin.v2.TableProto.internal_static_google_bigtable_admin_v2_ColumnFamily_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.bigtable.admin.v2.ColumnFamily.class, com.google.bigtable.admin.v2.ColumnFamily.Builder.class);
  }

  public static final int GC_RULE_FIELD_NUMBER = 1;
  private com.google.bigtable.admin.v2.GcRule gcRule_;
  /**
   * <code>optional .google.bigtable.admin.v2.GcRule gc_rule = 1;</code>
   *
   * <pre>
   * Garbage collection rule specified as a protobuf.
   * Must serialize to at most 500 bytes.
   * NOTE: Garbage collection executes opportunistically in the background, and
   * so it's possible for reads to return a cell even if it matches the active
   * GC expression for its family.
   * </pre>
   */
  public boolean hasGcRule() {
    return gcRule_ != null;
  }
  /**
   * <code>optional .google.bigtable.admin.v2.GcRule gc_rule = 1;</code>
   *
   * <pre>
   * Garbage collection rule specified as a protobuf.
   * Must serialize to at most 500 bytes.
   * NOTE: Garbage collection executes opportunistically in the background, and
   * so it's possible for reads to return a cell even if it matches the active
   * GC expression for its family.
   * </pre>
   */
  public com.google.bigtable.admin.v2.GcRule getGcRule() {
    return gcRule_ == null ? com.google.bigtable.admin.v2.GcRule.getDefaultInstance() : gcRule_;
  }
  /**
   * <code>optional .google.bigtable.admin.v2.GcRule gc_rule = 1;</code>
   *
   * <pre>
   * Garbage collection rule specified as a protobuf.
   * Must serialize to at most 500 bytes.
   * NOTE: Garbage collection executes opportunistically in the background, and
   * so it's possible for reads to return a cell even if it matches the active
   * GC expression for its family.
   * </pre>
   */
  public com.google.bigtable.admin.v2.GcRuleOrBuilder getGcRuleOrBuilder() {
    return getGcRule();
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (gcRule_ != null) {
      output.writeMessage(1, getGcRule());
    }
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (gcRule_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getGcRule());
    }
    memoizedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  public static com.google.bigtable.admin.v2.ColumnFamily parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.bigtable.admin.v2.ColumnFamily parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.bigtable.admin.v2.ColumnFamily parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.bigtable.admin.v2.ColumnFamily parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.bigtable.admin.v2.ColumnFamily parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static com.google.bigtable.admin.v2.ColumnFamily parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }
  public static com.google.bigtable.admin.v2.ColumnFamily parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input);
  }
  public static com.google.bigtable.admin.v2.ColumnFamily parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input, extensionRegistry);
  }
  public static com.google.bigtable.admin.v2.ColumnFamily parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static com.google.bigtable.admin.v2.ColumnFamily parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.bigtable.admin.v2.ColumnFamily prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessage.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code google.bigtable.admin.v2.ColumnFamily}
   *
   * <pre>
   * A set of columns within a table which share a common configuration.
   * </pre>
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessage.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:google.bigtable.admin.v2.ColumnFamily)
      com.google.bigtable.admin.v2.ColumnFamilyOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.bigtable.admin.v2.TableProto.internal_static_google_bigtable_admin_v2_ColumnFamily_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.bigtable.admin.v2.TableProto.internal_static_google_bigtable_admin_v2_ColumnFamily_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.bigtable.admin.v2.ColumnFamily.class, com.google.bigtable.admin.v2.ColumnFamily.Builder.class);
    }

    // Construct using com.google.bigtable.admin.v2.ColumnFamily.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
      }
    }
    public Builder clear() {
      super.clear();
      if (gcRuleBuilder_ == null) {
        gcRule_ = null;
      } else {
        gcRule_ = null;
        gcRuleBuilder_ = null;
      }
      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.bigtable.admin.v2.TableProto.internal_static_google_bigtable_admin_v2_ColumnFamily_descriptor;
    }

    public com.google.bigtable.admin.v2.ColumnFamily getDefaultInstanceForType() {
      return com.google.bigtable.admin.v2.ColumnFamily.getDefaultInstance();
    }

    public com.google.bigtable.admin.v2.ColumnFamily build() {
      com.google.bigtable.admin.v2.ColumnFamily result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public com.google.bigtable.admin.v2.ColumnFamily buildPartial() {
      com.google.bigtable.admin.v2.ColumnFamily result = new com.google.bigtable.admin.v2.ColumnFamily(this);
      if (gcRuleBuilder_ == null) {
        result.gcRule_ = gcRule_;
      } else {
        result.gcRule_ = gcRuleBuilder_.build();
      }
      onBuilt();
      return result;
    }

    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.bigtable.admin.v2.ColumnFamily) {
        return mergeFrom((com.google.bigtable.admin.v2.ColumnFamily)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.bigtable.admin.v2.ColumnFamily other) {
      if (other == com.google.bigtable.admin.v2.ColumnFamily.getDefaultInstance()) return this;
      if (other.hasGcRule()) {
        mergeGcRule(other.getGcRule());
      }
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.google.bigtable.admin.v2.ColumnFamily parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.google.bigtable.admin.v2.ColumnFamily) e.getUnfinishedMessage();
        throw e;
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private com.google.bigtable.admin.v2.GcRule gcRule_ = null;
    private com.google.protobuf.SingleFieldBuilder<
        com.google.bigtable.admin.v2.GcRule, com.google.bigtable.admin.v2.GcRule.Builder, com.google.bigtable.admin.v2.GcRuleOrBuilder> gcRuleBuilder_;
    /**
     * <code>optional .google.bigtable.admin.v2.GcRule gc_rule = 1;</code>
     *
     * <pre>
     * Garbage collection rule specified as a protobuf.
     * Must serialize to at most 500 bytes.
     * NOTE: Garbage collection executes opportunistically in the background, and
     * so it's possible for reads to return a cell even if it matches the active
     * GC expression for its family.
     * </pre>
     */
    public boolean hasGcRule() {
      return gcRuleBuilder_ != null || gcRule_ != null;
    }
    /**
     * <code>optional .google.bigtable.admin.v2.GcRule gc_rule = 1;</code>
     *
     * <pre>
     * Garbage collection rule specified as a protobuf.
     * Must serialize to at most 500 bytes.
     * NOTE: Garbage collection executes opportunistically in the background, and
     * so it's possible for reads to return a cell even if it matches the active
     * GC expression for its family.
     * </pre>
     */
    public com.google.bigtable.admin.v2.GcRule getGcRule() {
      if (gcRuleBuilder_ == null) {
        return gcRule_ == null ? com.google.bigtable.admin.v2.GcRule.getDefaultInstance() : gcRule_;
      } else {
        return gcRuleBuilder_.getMessage();
      }
    }
    /**
     * <code>optional .google.bigtable.admin.v2.GcRule gc_rule = 1;</code>
     *
     * <pre>
     * Garbage collection rule specified as a protobuf.
     * Must serialize to at most 500 bytes.
     * NOTE: Garbage collection executes opportunistically in the background, and
     * so it's possible for reads to return a cell even if it matches the active
     * GC expression for its family.
     * </pre>
     */
    public Builder setGcRule(com.google.bigtable.admin.v2.GcRule value) {
      if (gcRuleBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        gcRule_ = value;
        onChanged();
      } else {
        gcRuleBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <code>optional .google.bigtable.admin.v2.GcRule gc_rule = 1;</code>
     *
     * <pre>
     * Garbage collection rule specified as a protobuf.
     * Must serialize to at most 500 bytes.
     * NOTE: Garbage collection executes opportunistically in the background, and
     * so it's possible for reads to return a cell even if it matches the active
     * GC expression for its family.
     * </pre>
     */
    public Builder setGcRule(
        com.google.bigtable.admin.v2.GcRule.Builder builderForValue) {
      if (gcRuleBuilder_ == null) {
        gcRule_ = builderForValue.build();
        onChanged();
      } else {
        gcRuleBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <code>optional .google.bigtable.admin.v2.GcRule gc_rule = 1;</code>
     *
     * <pre>
     * Garbage collection rule specified as a protobuf.
     * Must serialize to at most 500 bytes.
     * NOTE: Garbage collection executes opportunistically in the background, and
     * so it's possible for reads to return a cell even if it matches the active
     * GC expression for its family.
     * </pre>
     */
    public Builder mergeGcRule(com.google.bigtable.admin.v2.GcRule value) {
      if (gcRuleBuilder_ == null) {
        if (gcRule_ != null) {
          gcRule_ =
            com.google.bigtable.admin.v2.GcRule.newBuilder(gcRule_).mergeFrom(value).buildPartial();
        } else {
          gcRule_ = value;
        }
        onChanged();
      } else {
        gcRuleBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <code>optional .google.bigtable.admin.v2.GcRule gc_rule = 1;</code>
     *
     * <pre>
     * Garbage collection rule specified as a protobuf.
     * Must serialize to at most 500 bytes.
     * NOTE: Garbage collection executes opportunistically in the background, and
     * so it's possible for reads to return a cell even if it matches the active
     * GC expression for its family.
     * </pre>
     */
    public Builder clearGcRule() {
      if (gcRuleBuilder_ == null) {
        gcRule_ = null;
        onChanged();
      } else {
        gcRule_ = null;
        gcRuleBuilder_ = null;
      }

      return this;
    }
    /**
     * <code>optional .google.bigtable.admin.v2.GcRule gc_rule = 1;</code>
     *
     * <pre>
     * Garbage collection rule specified as a protobuf.
     * Must serialize to at most 500 bytes.
     * NOTE: Garbage collection executes opportunistically in the background, and
     * so it's possible for reads to return a cell even if it matches the active
     * GC expression for its family.
     * </pre>
     */
    public com.google.bigtable.admin.v2.GcRule.Builder getGcRuleBuilder() {
      
      onChanged();
      return getGcRuleFieldBuilder().getBuilder();
    }
    /**
     * <code>optional .google.bigtable.admin.v2.GcRule gc_rule = 1;</code>
     *
     * <pre>
     * Garbage collection rule specified as a protobuf.
     * Must serialize to at most 500 bytes.
     * NOTE: Garbage collection executes opportunistically in the background, and
     * so it's possible for reads to return a cell even if it matches the active
     * GC expression for its family.
     * </pre>
     */
    public com.google.bigtable.admin.v2.GcRuleOrBuilder getGcRuleOrBuilder() {
      if (gcRuleBuilder_ != null) {
        return gcRuleBuilder_.getMessageOrBuilder();
      } else {
        return gcRule_ == null ?
            com.google.bigtable.admin.v2.GcRule.getDefaultInstance() : gcRule_;
      }
    }
    /**
     * <code>optional .google.bigtable.admin.v2.GcRule gc_rule = 1;</code>
     *
     * <pre>
     * Garbage collection rule specified as a protobuf.
     * Must serialize to at most 500 bytes.
     * NOTE: Garbage collection executes opportunistically in the background, and
     * so it's possible for reads to return a cell even if it matches the active
     * GC expression for its family.
     * </pre>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.google.bigtable.admin.v2.GcRule, com.google.bigtable.admin.v2.GcRule.Builder, com.google.bigtable.admin.v2.GcRuleOrBuilder> 
        getGcRuleFieldBuilder() {
      if (gcRuleBuilder_ == null) {
        gcRuleBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.google.bigtable.admin.v2.GcRule, com.google.bigtable.admin.v2.GcRule.Builder, com.google.bigtable.admin.v2.GcRuleOrBuilder>(
                getGcRule(),
                getParentForChildren(),
                isClean());
        gcRule_ = null;
      }
      return gcRuleBuilder_;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }


    // @@protoc_insertion_point(builder_scope:google.bigtable.admin.v2.ColumnFamily)
  }

  // @@protoc_insertion_point(class_scope:google.bigtable.admin.v2.ColumnFamily)
  private static final com.google.bigtable.admin.v2.ColumnFamily DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.bigtable.admin.v2.ColumnFamily();
  }

  public static com.google.bigtable.admin.v2.ColumnFamily getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<ColumnFamily>
      PARSER = new com.google.protobuf.AbstractParser<ColumnFamily>() {
    public ColumnFamily parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      try {
        return new ColumnFamily(input, extensionRegistry);
      } catch (RuntimeException e) {
        if (e.getCause() instanceof
            com.google.protobuf.InvalidProtocolBufferException) {
          throw (com.google.protobuf.InvalidProtocolBufferException)
              e.getCause();
        }
        throw e;
      }
    }
  };

  public static com.google.protobuf.Parser<ColumnFamily> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<ColumnFamily> getParserForType() {
    return PARSER;
  }

  public com.google.bigtable.admin.v2.ColumnFamily getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}


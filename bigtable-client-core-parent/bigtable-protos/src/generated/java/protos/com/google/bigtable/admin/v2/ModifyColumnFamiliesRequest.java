// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/bigtable/admin/v2/bigtable_table_admin.proto

package com.google.bigtable.admin.v2;

/**
 * Protobuf type {@code google.bigtable.admin.v2.ModifyColumnFamiliesRequest}
 *
 * <pre>
 * Request message for [google.bigtable.admin.v2.BigtableTableAdmin.ModifyColumnFamilies][google.bigtable.admin.v2.BigtableTableAdmin.ModifyColumnFamilies]
 * </pre>
 */
public  final class ModifyColumnFamiliesRequest extends
    com.google.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:google.bigtable.admin.v2.ModifyColumnFamiliesRequest)
    ModifyColumnFamiliesRequestOrBuilder {
  // Use ModifyColumnFamiliesRequest.newBuilder() to construct.
  private ModifyColumnFamiliesRequest(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
    super(builder);
  }
  private ModifyColumnFamiliesRequest() {
    name_ = "";
    modifications_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
  }
  private ModifyColumnFamiliesRequest(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
    this();
    int mutable_bitField0_ = 0;
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!input.skipField(tag)) {
              done = true;
            }
            break;
          }
          case 10: {
            java.lang.String s = input.readStringRequireUtf8();

            name_ = s;
            break;
          }
          case 18: {
            if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
              modifications_ = new java.util.ArrayList<com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification>();
              mutable_bitField0_ |= 0x00000002;
            }
            modifications_.add(input.readMessage(com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification.parser(), extensionRegistry));
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw new RuntimeException(e.setUnfinishedMessage(this));
    } catch (java.io.IOException e) {
      throw new RuntimeException(
          new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this));
    } finally {
      if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
        modifications_ = java.util.Collections.unmodifiableList(modifications_);
      }
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.bigtable.admin.v2.BigtableTableAdminProto.internal_static_google_bigtable_admin_v2_ModifyColumnFamiliesRequest_descriptor;
  }

  protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.bigtable.admin.v2.BigtableTableAdminProto.internal_static_google_bigtable_admin_v2_ModifyColumnFamiliesRequest_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest.class, com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Builder.class);
  }

  public interface ModificationOrBuilder extends
      // @@protoc_insertion_point(interface_extends:google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional string id = 1;</code>
     *
     * <pre>
     * The ID of the column family to be modified.
     * </pre>
     */
    java.lang.String getId();
    /**
     * <code>optional string id = 1;</code>
     *
     * <pre>
     * The ID of the column family to be modified.
     * </pre>
     */
    com.google.protobuf.ByteString
        getIdBytes();

    /**
     * <code>optional .google.bigtable.admin.v2.ColumnFamily create = 2;</code>
     *
     * <pre>
     * Create a new column family with the specified schema, or fail if
     * one already exists with the given ID.
     * </pre>
     */
    com.google.bigtable.admin.v2.ColumnFamily getCreate();
    /**
     * <code>optional .google.bigtable.admin.v2.ColumnFamily create = 2;</code>
     *
     * <pre>
     * Create a new column family with the specified schema, or fail if
     * one already exists with the given ID.
     * </pre>
     */
    com.google.bigtable.admin.v2.ColumnFamilyOrBuilder getCreateOrBuilder();

    /**
     * <code>optional .google.bigtable.admin.v2.ColumnFamily update = 3;</code>
     *
     * <pre>
     * Update an existing column family to the specified schema, or fail
     * if no column family exists with the given ID.
     * </pre>
     */
    com.google.bigtable.admin.v2.ColumnFamily getUpdate();
    /**
     * <code>optional .google.bigtable.admin.v2.ColumnFamily update = 3;</code>
     *
     * <pre>
     * Update an existing column family to the specified schema, or fail
     * if no column family exists with the given ID.
     * </pre>
     */
    com.google.bigtable.admin.v2.ColumnFamilyOrBuilder getUpdateOrBuilder();

    /**
     * <code>optional bool drop = 4;</code>
     *
     * <pre>
     * Drop (delete) the column family with the given ID, or fail if no such
     * family exists.
     * </pre>
     */
    boolean getDrop();

    public com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification.ModCase getModCase();
  }
  /**
   * Protobuf type {@code google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification}
   *
   * <pre>
   * A create, update, or delete of a particular column family.
   * </pre>
   */
  public  static final class Modification extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification)
      ModificationOrBuilder {
    // Use Modification.newBuilder() to construct.
    private Modification(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Modification() {
      id_ = "";
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private Modification(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              id_ = s;
              break;
            }
            case 18: {
              com.google.bigtable.admin.v2.ColumnFamily.Builder subBuilder = null;
              if (modCase_ == 2) {
                subBuilder = ((com.google.bigtable.admin.v2.ColumnFamily) mod_).toBuilder();
              }
              mod_ =
                  input.readMessage(com.google.bigtable.admin.v2.ColumnFamily.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((com.google.bigtable.admin.v2.ColumnFamily) mod_);
                mod_ = subBuilder.buildPartial();
              }
              modCase_ = 2;
              break;
            }
            case 26: {
              com.google.bigtable.admin.v2.ColumnFamily.Builder subBuilder = null;
              if (modCase_ == 3) {
                subBuilder = ((com.google.bigtable.admin.v2.ColumnFamily) mod_).toBuilder();
              }
              mod_ =
                  input.readMessage(com.google.bigtable.admin.v2.ColumnFamily.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((com.google.bigtable.admin.v2.ColumnFamily) mod_);
                mod_ = subBuilder.buildPartial();
              }
              modCase_ = 3;
              break;
            }
            case 32: {
              modCase_ = 4;
              mod_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw new RuntimeException(e.setUnfinishedMessage(this));
      } catch (java.io.IOException e) {
        throw new RuntimeException(
            new com.google.protobuf.InvalidProtocolBufferException(
                e.getMessage()).setUnfinishedMessage(this));
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.bigtable.admin.v2.BigtableTableAdminProto.internal_static_google_bigtable_admin_v2_ModifyColumnFamiliesRequest_Modification_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.bigtable.admin.v2.BigtableTableAdminProto.internal_static_google_bigtable_admin_v2_ModifyColumnFamiliesRequest_Modification_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification.class, com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification.Builder.class);
    }

    private int modCase_ = 0;
    private java.lang.Object mod_;
    public enum ModCase
        implements com.google.protobuf.Internal.EnumLite {
      CREATE(2),
      UPDATE(3),
      DROP(4),
      MOD_NOT_SET(0);
      private int value = 0;
      private ModCase(int value) {
        this.value = value;
      }
      public static ModCase valueOf(int value) {
        switch (value) {
          case 2: return CREATE;
          case 3: return UPDATE;
          case 4: return DROP;
          case 0: return MOD_NOT_SET;
          default: throw new java.lang.IllegalArgumentException(
            "Value is undefined for this oneof enum.");
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public ModCase
    getModCase() {
      return ModCase.valueOf(
          modCase_);
    }

    public static final int ID_FIELD_NUMBER = 1;
    private volatile java.lang.Object id_;
    /**
     * <code>optional string id = 1;</code>
     *
     * <pre>
     * The ID of the column family to be modified.
     * </pre>
     */
    public java.lang.String getId() {
      java.lang.Object ref = id_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        id_ = s;
        return s;
      }
    }
    /**
     * <code>optional string id = 1;</code>
     *
     * <pre>
     * The ID of the column family to be modified.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getIdBytes() {
      java.lang.Object ref = id_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        id_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int CREATE_FIELD_NUMBER = 2;
    /**
     * <code>optional .google.bigtable.admin.v2.ColumnFamily create = 2;</code>
     *
     * <pre>
     * Create a new column family with the specified schema, or fail if
     * one already exists with the given ID.
     * </pre>
     */
    public com.google.bigtable.admin.v2.ColumnFamily getCreate() {
      if (modCase_ == 2) {
         return (com.google.bigtable.admin.v2.ColumnFamily) mod_;
      }
      return com.google.bigtable.admin.v2.ColumnFamily.getDefaultInstance();
    }
    /**
     * <code>optional .google.bigtable.admin.v2.ColumnFamily create = 2;</code>
     *
     * <pre>
     * Create a new column family with the specified schema, or fail if
     * one already exists with the given ID.
     * </pre>
     */
    public com.google.bigtable.admin.v2.ColumnFamilyOrBuilder getCreateOrBuilder() {
      if (modCase_ == 2) {
         return (com.google.bigtable.admin.v2.ColumnFamily) mod_;
      }
      return com.google.bigtable.admin.v2.ColumnFamily.getDefaultInstance();
    }

    public static final int UPDATE_FIELD_NUMBER = 3;
    /**
     * <code>optional .google.bigtable.admin.v2.ColumnFamily update = 3;</code>
     *
     * <pre>
     * Update an existing column family to the specified schema, or fail
     * if no column family exists with the given ID.
     * </pre>
     */
    public com.google.bigtable.admin.v2.ColumnFamily getUpdate() {
      if (modCase_ == 3) {
         return (com.google.bigtable.admin.v2.ColumnFamily) mod_;
      }
      return com.google.bigtable.admin.v2.ColumnFamily.getDefaultInstance();
    }
    /**
     * <code>optional .google.bigtable.admin.v2.ColumnFamily update = 3;</code>
     *
     * <pre>
     * Update an existing column family to the specified schema, or fail
     * if no column family exists with the given ID.
     * </pre>
     */
    public com.google.bigtable.admin.v2.ColumnFamilyOrBuilder getUpdateOrBuilder() {
      if (modCase_ == 3) {
         return (com.google.bigtable.admin.v2.ColumnFamily) mod_;
      }
      return com.google.bigtable.admin.v2.ColumnFamily.getDefaultInstance();
    }

    public static final int DROP_FIELD_NUMBER = 4;
    /**
     * <code>optional bool drop = 4;</code>
     *
     * <pre>
     * Drop (delete) the column family with the given ID, or fail if no such
     * family exists.
     * </pre>
     */
    public boolean getDrop() {
      if (modCase_ == 4) {
        return (java.lang.Boolean) mod_;
      }
      return false;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getIdBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessage.writeString(output, 1, id_);
      }
      if (modCase_ == 2) {
        output.writeMessage(2, (com.google.bigtable.admin.v2.ColumnFamily) mod_);
      }
      if (modCase_ == 3) {
        output.writeMessage(3, (com.google.bigtable.admin.v2.ColumnFamily) mod_);
      }
      if (modCase_ == 4) {
        output.writeBool(
            4, (boolean)((java.lang.Boolean) mod_));
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getIdBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(1, id_);
      }
      if (modCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, (com.google.bigtable.admin.v2.ColumnFamily) mod_);
      }
      if (modCase_ == 3) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, (com.google.bigtable.admin.v2.ColumnFamily) mod_);
      }
      if (modCase_ == 4) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(
              4, (boolean)((java.lang.Boolean) mod_));
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    public static com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification}
     *
     * <pre>
     * A create, update, or delete of a particular column family.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification)
        com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest.ModificationOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.google.bigtable.admin.v2.BigtableTableAdminProto.internal_static_google_bigtable_admin_v2_ModifyColumnFamiliesRequest_Modification_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.bigtable.admin.v2.BigtableTableAdminProto.internal_static_google_bigtable_admin_v2_ModifyColumnFamiliesRequest_Modification_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification.class, com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification.Builder.class);
      }

      // Construct using com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        id_ = "";

        modCase_ = 0;
        mod_ = null;
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.google.bigtable.admin.v2.BigtableTableAdminProto.internal_static_google_bigtable_admin_v2_ModifyColumnFamiliesRequest_Modification_descriptor;
      }

      public com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification getDefaultInstanceForType() {
        return com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification.getDefaultInstance();
      }

      public com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification build() {
        com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification buildPartial() {
        com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification result = new com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification(this);
        result.id_ = id_;
        if (modCase_ == 2) {
          if (createBuilder_ == null) {
            result.mod_ = mod_;
          } else {
            result.mod_ = createBuilder_.build();
          }
        }
        if (modCase_ == 3) {
          if (updateBuilder_ == null) {
            result.mod_ = mod_;
          } else {
            result.mod_ = updateBuilder_.build();
          }
        }
        if (modCase_ == 4) {
          result.mod_ = mod_;
        }
        result.modCase_ = modCase_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification) {
          return mergeFrom((com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification other) {
        if (other == com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification.getDefaultInstance()) return this;
        if (!other.getId().isEmpty()) {
          id_ = other.id_;
          onChanged();
        }
        switch (other.getModCase()) {
          case CREATE: {
            mergeCreate(other.getCreate());
            break;
          }
          case UPDATE: {
            mergeUpdate(other.getUpdate());
            break;
          }
          case DROP: {
            setDrop(other.getDrop());
            break;
          }
          case MOD_NOT_SET: {
            break;
          }
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int modCase_ = 0;
      private java.lang.Object mod_;
      public ModCase
          getModCase() {
        return ModCase.valueOf(
            modCase_);
      }

      public Builder clearMod() {
        modCase_ = 0;
        mod_ = null;
        onChanged();
        return this;
      }


      private java.lang.Object id_ = "";
      /**
       * <code>optional string id = 1;</code>
       *
       * <pre>
       * The ID of the column family to be modified.
       * </pre>
       */
      public java.lang.String getId() {
        java.lang.Object ref = id_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          id_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string id = 1;</code>
       *
       * <pre>
       * The ID of the column family to be modified.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getIdBytes() {
        java.lang.Object ref = id_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          id_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string id = 1;</code>
       *
       * <pre>
       * The ID of the column family to be modified.
       * </pre>
       */
      public Builder setId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        id_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string id = 1;</code>
       *
       * <pre>
       * The ID of the column family to be modified.
       * </pre>
       */
      public Builder clearId() {
        
        id_ = getDefaultInstance().getId();
        onChanged();
        return this;
      }
      /**
       * <code>optional string id = 1;</code>
       *
       * <pre>
       * The ID of the column family to be modified.
       * </pre>
       */
      public Builder setIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        id_ = value;
        onChanged();
        return this;
      }

      private com.google.protobuf.SingleFieldBuilder<
          com.google.bigtable.admin.v2.ColumnFamily, com.google.bigtable.admin.v2.ColumnFamily.Builder, com.google.bigtable.admin.v2.ColumnFamilyOrBuilder> createBuilder_;
      /**
       * <code>optional .google.bigtable.admin.v2.ColumnFamily create = 2;</code>
       *
       * <pre>
       * Create a new column family with the specified schema, or fail if
       * one already exists with the given ID.
       * </pre>
       */
      public com.google.bigtable.admin.v2.ColumnFamily getCreate() {
        if (createBuilder_ == null) {
          if (modCase_ == 2) {
            return (com.google.bigtable.admin.v2.ColumnFamily) mod_;
          }
          return com.google.bigtable.admin.v2.ColumnFamily.getDefaultInstance();
        } else {
          if (modCase_ == 2) {
            return createBuilder_.getMessage();
          }
          return com.google.bigtable.admin.v2.ColumnFamily.getDefaultInstance();
        }
      }
      /**
       * <code>optional .google.bigtable.admin.v2.ColumnFamily create = 2;</code>
       *
       * <pre>
       * Create a new column family with the specified schema, or fail if
       * one already exists with the given ID.
       * </pre>
       */
      public Builder setCreate(com.google.bigtable.admin.v2.ColumnFamily value) {
        if (createBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          mod_ = value;
          onChanged();
        } else {
          createBuilder_.setMessage(value);
        }
        modCase_ = 2;
        return this;
      }
      /**
       * <code>optional .google.bigtable.admin.v2.ColumnFamily create = 2;</code>
       *
       * <pre>
       * Create a new column family with the specified schema, or fail if
       * one already exists with the given ID.
       * </pre>
       */
      public Builder setCreate(
          com.google.bigtable.admin.v2.ColumnFamily.Builder builderForValue) {
        if (createBuilder_ == null) {
          mod_ = builderForValue.build();
          onChanged();
        } else {
          createBuilder_.setMessage(builderForValue.build());
        }
        modCase_ = 2;
        return this;
      }
      /**
       * <code>optional .google.bigtable.admin.v2.ColumnFamily create = 2;</code>
       *
       * <pre>
       * Create a new column family with the specified schema, or fail if
       * one already exists with the given ID.
       * </pre>
       */
      public Builder mergeCreate(com.google.bigtable.admin.v2.ColumnFamily value) {
        if (createBuilder_ == null) {
          if (modCase_ == 2 &&
              mod_ != com.google.bigtable.admin.v2.ColumnFamily.getDefaultInstance()) {
            mod_ = com.google.bigtable.admin.v2.ColumnFamily.newBuilder((com.google.bigtable.admin.v2.ColumnFamily) mod_)
                .mergeFrom(value).buildPartial();
          } else {
            mod_ = value;
          }
          onChanged();
        } else {
          if (modCase_ == 2) {
            createBuilder_.mergeFrom(value);
          }
          createBuilder_.setMessage(value);
        }
        modCase_ = 2;
        return this;
      }
      /**
       * <code>optional .google.bigtable.admin.v2.ColumnFamily create = 2;</code>
       *
       * <pre>
       * Create a new column family with the specified schema, or fail if
       * one already exists with the given ID.
       * </pre>
       */
      public Builder clearCreate() {
        if (createBuilder_ == null) {
          if (modCase_ == 2) {
            modCase_ = 0;
            mod_ = null;
            onChanged();
          }
        } else {
          if (modCase_ == 2) {
            modCase_ = 0;
            mod_ = null;
          }
          createBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .google.bigtable.admin.v2.ColumnFamily create = 2;</code>
       *
       * <pre>
       * Create a new column family with the specified schema, or fail if
       * one already exists with the given ID.
       * </pre>
       */
      public com.google.bigtable.admin.v2.ColumnFamily.Builder getCreateBuilder() {
        return getCreateFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .google.bigtable.admin.v2.ColumnFamily create = 2;</code>
       *
       * <pre>
       * Create a new column family with the specified schema, or fail if
       * one already exists with the given ID.
       * </pre>
       */
      public com.google.bigtable.admin.v2.ColumnFamilyOrBuilder getCreateOrBuilder() {
        if ((modCase_ == 2) && (createBuilder_ != null)) {
          return createBuilder_.getMessageOrBuilder();
        } else {
          if (modCase_ == 2) {
            return (com.google.bigtable.admin.v2.ColumnFamily) mod_;
          }
          return com.google.bigtable.admin.v2.ColumnFamily.getDefaultInstance();
        }
      }
      /**
       * <code>optional .google.bigtable.admin.v2.ColumnFamily create = 2;</code>
       *
       * <pre>
       * Create a new column family with the specified schema, or fail if
       * one already exists with the given ID.
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.google.bigtable.admin.v2.ColumnFamily, com.google.bigtable.admin.v2.ColumnFamily.Builder, com.google.bigtable.admin.v2.ColumnFamilyOrBuilder> 
          getCreateFieldBuilder() {
        if (createBuilder_ == null) {
          if (!(modCase_ == 2)) {
            mod_ = com.google.bigtable.admin.v2.ColumnFamily.getDefaultInstance();
          }
          createBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.google.bigtable.admin.v2.ColumnFamily, com.google.bigtable.admin.v2.ColumnFamily.Builder, com.google.bigtable.admin.v2.ColumnFamilyOrBuilder>(
                  (com.google.bigtable.admin.v2.ColumnFamily) mod_,
                  getParentForChildren(),
                  isClean());
          mod_ = null;
        }
        modCase_ = 2;
        onChanged();;
        return createBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilder<
          com.google.bigtable.admin.v2.ColumnFamily, com.google.bigtable.admin.v2.ColumnFamily.Builder, com.google.bigtable.admin.v2.ColumnFamilyOrBuilder> updateBuilder_;
      /**
       * <code>optional .google.bigtable.admin.v2.ColumnFamily update = 3;</code>
       *
       * <pre>
       * Update an existing column family to the specified schema, or fail
       * if no column family exists with the given ID.
       * </pre>
       */
      public com.google.bigtable.admin.v2.ColumnFamily getUpdate() {
        if (updateBuilder_ == null) {
          if (modCase_ == 3) {
            return (com.google.bigtable.admin.v2.ColumnFamily) mod_;
          }
          return com.google.bigtable.admin.v2.ColumnFamily.getDefaultInstance();
        } else {
          if (modCase_ == 3) {
            return updateBuilder_.getMessage();
          }
          return com.google.bigtable.admin.v2.ColumnFamily.getDefaultInstance();
        }
      }
      /**
       * <code>optional .google.bigtable.admin.v2.ColumnFamily update = 3;</code>
       *
       * <pre>
       * Update an existing column family to the specified schema, or fail
       * if no column family exists with the given ID.
       * </pre>
       */
      public Builder setUpdate(com.google.bigtable.admin.v2.ColumnFamily value) {
        if (updateBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          mod_ = value;
          onChanged();
        } else {
          updateBuilder_.setMessage(value);
        }
        modCase_ = 3;
        return this;
      }
      /**
       * <code>optional .google.bigtable.admin.v2.ColumnFamily update = 3;</code>
       *
       * <pre>
       * Update an existing column family to the specified schema, or fail
       * if no column family exists with the given ID.
       * </pre>
       */
      public Builder setUpdate(
          com.google.bigtable.admin.v2.ColumnFamily.Builder builderForValue) {
        if (updateBuilder_ == null) {
          mod_ = builderForValue.build();
          onChanged();
        } else {
          updateBuilder_.setMessage(builderForValue.build());
        }
        modCase_ = 3;
        return this;
      }
      /**
       * <code>optional .google.bigtable.admin.v2.ColumnFamily update = 3;</code>
       *
       * <pre>
       * Update an existing column family to the specified schema, or fail
       * if no column family exists with the given ID.
       * </pre>
       */
      public Builder mergeUpdate(com.google.bigtable.admin.v2.ColumnFamily value) {
        if (updateBuilder_ == null) {
          if (modCase_ == 3 &&
              mod_ != com.google.bigtable.admin.v2.ColumnFamily.getDefaultInstance()) {
            mod_ = com.google.bigtable.admin.v2.ColumnFamily.newBuilder((com.google.bigtable.admin.v2.ColumnFamily) mod_)
                .mergeFrom(value).buildPartial();
          } else {
            mod_ = value;
          }
          onChanged();
        } else {
          if (modCase_ == 3) {
            updateBuilder_.mergeFrom(value);
          }
          updateBuilder_.setMessage(value);
        }
        modCase_ = 3;
        return this;
      }
      /**
       * <code>optional .google.bigtable.admin.v2.ColumnFamily update = 3;</code>
       *
       * <pre>
       * Update an existing column family to the specified schema, or fail
       * if no column family exists with the given ID.
       * </pre>
       */
      public Builder clearUpdate() {
        if (updateBuilder_ == null) {
          if (modCase_ == 3) {
            modCase_ = 0;
            mod_ = null;
            onChanged();
          }
        } else {
          if (modCase_ == 3) {
            modCase_ = 0;
            mod_ = null;
          }
          updateBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .google.bigtable.admin.v2.ColumnFamily update = 3;</code>
       *
       * <pre>
       * Update an existing column family to the specified schema, or fail
       * if no column family exists with the given ID.
       * </pre>
       */
      public com.google.bigtable.admin.v2.ColumnFamily.Builder getUpdateBuilder() {
        return getUpdateFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .google.bigtable.admin.v2.ColumnFamily update = 3;</code>
       *
       * <pre>
       * Update an existing column family to the specified schema, or fail
       * if no column family exists with the given ID.
       * </pre>
       */
      public com.google.bigtable.admin.v2.ColumnFamilyOrBuilder getUpdateOrBuilder() {
        if ((modCase_ == 3) && (updateBuilder_ != null)) {
          return updateBuilder_.getMessageOrBuilder();
        } else {
          if (modCase_ == 3) {
            return (com.google.bigtable.admin.v2.ColumnFamily) mod_;
          }
          return com.google.bigtable.admin.v2.ColumnFamily.getDefaultInstance();
        }
      }
      /**
       * <code>optional .google.bigtable.admin.v2.ColumnFamily update = 3;</code>
       *
       * <pre>
       * Update an existing column family to the specified schema, or fail
       * if no column family exists with the given ID.
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.google.bigtable.admin.v2.ColumnFamily, com.google.bigtable.admin.v2.ColumnFamily.Builder, com.google.bigtable.admin.v2.ColumnFamilyOrBuilder> 
          getUpdateFieldBuilder() {
        if (updateBuilder_ == null) {
          if (!(modCase_ == 3)) {
            mod_ = com.google.bigtable.admin.v2.ColumnFamily.getDefaultInstance();
          }
          updateBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.google.bigtable.admin.v2.ColumnFamily, com.google.bigtable.admin.v2.ColumnFamily.Builder, com.google.bigtable.admin.v2.ColumnFamilyOrBuilder>(
                  (com.google.bigtable.admin.v2.ColumnFamily) mod_,
                  getParentForChildren(),
                  isClean());
          mod_ = null;
        }
        modCase_ = 3;
        onChanged();;
        return updateBuilder_;
      }

      /**
       * <code>optional bool drop = 4;</code>
       *
       * <pre>
       * Drop (delete) the column family with the given ID, or fail if no such
       * family exists.
       * </pre>
       */
      public boolean getDrop() {
        if (modCase_ == 4) {
          return (java.lang.Boolean) mod_;
        }
        return false;
      }
      /**
       * <code>optional bool drop = 4;</code>
       *
       * <pre>
       * Drop (delete) the column family with the given ID, or fail if no such
       * family exists.
       * </pre>
       */
      public Builder setDrop(boolean value) {
        modCase_ = 4;
        mod_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool drop = 4;</code>
       *
       * <pre>
       * Drop (delete) the column family with the given ID, or fail if no such
       * family exists.
       * </pre>
       */
      public Builder clearDrop() {
        if (modCase_ == 4) {
          modCase_ = 0;
          mod_ = null;
          onChanged();
        }
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification)
    }

    // @@protoc_insertion_point(class_scope:google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification)
    private static final com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification();
    }

    public static com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Modification>
        PARSER = new com.google.protobuf.AbstractParser<Modification>() {
      public Modification parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        try {
          return new Modification(input, extensionRegistry);
        } catch (RuntimeException e) {
          if (e.getCause() instanceof
              com.google.protobuf.InvalidProtocolBufferException) {
            throw (com.google.protobuf.InvalidProtocolBufferException)
                e.getCause();
          }
          throw e;
        }
      }
    };

    public static com.google.protobuf.Parser<Modification> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Modification> getParserForType() {
      return PARSER;
    }

    public com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private int bitField0_;
  public static final int NAME_FIELD_NUMBER = 1;
  private volatile java.lang.Object name_;
  /**
   * <code>optional string name = 1;</code>
   *
   * <pre>
   * The unique name of the table whose families should be modified.
   * Values are of the form projects/&lt;project&gt;/instances/&lt;instance&gt;/tables/&lt;table&gt;
   * </pre>
   */
  public java.lang.String getName() {
    java.lang.Object ref = name_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      name_ = s;
      return s;
    }
  }
  /**
   * <code>optional string name = 1;</code>
   *
   * <pre>
   * The unique name of the table whose families should be modified.
   * Values are of the form projects/&lt;project&gt;/instances/&lt;instance&gt;/tables/&lt;table&gt;
   * </pre>
   */
  public com.google.protobuf.ByteString
      getNameBytes() {
    java.lang.Object ref = name_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      name_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int MODIFICATIONS_FIELD_NUMBER = 2;
  private java.util.List<com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification> modifications_;
  /**
   * <code>repeated .google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification modifications = 2;</code>
   *
   * <pre>
   * Modifications to be atomically applied to the specified table's families.
   * Entries are applied in order, meaning that earlier modifications can be
   * masked by later ones (in the case of repeated updates to the same family,
   * for example).
   * </pre>
   */
  public java.util.List<com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification> getModificationsList() {
    return modifications_;
  }
  /**
   * <code>repeated .google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification modifications = 2;</code>
   *
   * <pre>
   * Modifications to be atomically applied to the specified table's families.
   * Entries are applied in order, meaning that earlier modifications can be
   * masked by later ones (in the case of repeated updates to the same family,
   * for example).
   * </pre>
   */
  public java.util.List<? extends com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest.ModificationOrBuilder> 
      getModificationsOrBuilderList() {
    return modifications_;
  }
  /**
   * <code>repeated .google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification modifications = 2;</code>
   *
   * <pre>
   * Modifications to be atomically applied to the specified table's families.
   * Entries are applied in order, meaning that earlier modifications can be
   * masked by later ones (in the case of repeated updates to the same family,
   * for example).
   * </pre>
   */
  public int getModificationsCount() {
    return modifications_.size();
  }
  /**
   * <code>repeated .google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification modifications = 2;</code>
   *
   * <pre>
   * Modifications to be atomically applied to the specified table's families.
   * Entries are applied in order, meaning that earlier modifications can be
   * masked by later ones (in the case of repeated updates to the same family,
   * for example).
   * </pre>
   */
  public com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification getModifications(int index) {
    return modifications_.get(index);
  }
  /**
   * <code>repeated .google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification modifications = 2;</code>
   *
   * <pre>
   * Modifications to be atomically applied to the specified table's families.
   * Entries are applied in order, meaning that earlier modifications can be
   * masked by later ones (in the case of repeated updates to the same family,
   * for example).
   * </pre>
   */
  public com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest.ModificationOrBuilder getModificationsOrBuilder(
      int index) {
    return modifications_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!getNameBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessage.writeString(output, 1, name_);
    }
    for (int i = 0; i < modifications_.size(); i++) {
      output.writeMessage(2, modifications_.get(i));
    }
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!getNameBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessage.computeStringSize(1, name_);
    }
    for (int i = 0; i < modifications_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, modifications_.get(i));
    }
    memoizedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  public static com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }
  public static com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input);
  }
  public static com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input, extensionRegistry);
  }
  public static com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessage.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code google.bigtable.admin.v2.ModifyColumnFamiliesRequest}
   *
   * <pre>
   * Request message for [google.bigtable.admin.v2.BigtableTableAdmin.ModifyColumnFamilies][google.bigtable.admin.v2.BigtableTableAdmin.ModifyColumnFamilies]
   * </pre>
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessage.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:google.bigtable.admin.v2.ModifyColumnFamiliesRequest)
      com.google.bigtable.admin.v2.ModifyColumnFamiliesRequestOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.bigtable.admin.v2.BigtableTableAdminProto.internal_static_google_bigtable_admin_v2_ModifyColumnFamiliesRequest_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.bigtable.admin.v2.BigtableTableAdminProto.internal_static_google_bigtable_admin_v2_ModifyColumnFamiliesRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest.class, com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Builder.class);
    }

    // Construct using com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        getModificationsFieldBuilder();
      }
    }
    public Builder clear() {
      super.clear();
      name_ = "";

      if (modificationsBuilder_ == null) {
        modifications_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
      } else {
        modificationsBuilder_.clear();
      }
      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.bigtable.admin.v2.BigtableTableAdminProto.internal_static_google_bigtable_admin_v2_ModifyColumnFamiliesRequest_descriptor;
    }

    public com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest getDefaultInstanceForType() {
      return com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest.getDefaultInstance();
    }

    public com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest build() {
      com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest buildPartial() {
      com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest result = new com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      result.name_ = name_;
      if (modificationsBuilder_ == null) {
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          modifications_ = java.util.Collections.unmodifiableList(modifications_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.modifications_ = modifications_;
      } else {
        result.modifications_ = modificationsBuilder_.build();
      }
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest) {
        return mergeFrom((com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest other) {
      if (other == com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest.getDefaultInstance()) return this;
      if (!other.getName().isEmpty()) {
        name_ = other.name_;
        onChanged();
      }
      if (modificationsBuilder_ == null) {
        if (!other.modifications_.isEmpty()) {
          if (modifications_.isEmpty()) {
            modifications_ = other.modifications_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureModificationsIsMutable();
            modifications_.addAll(other.modifications_);
          }
          onChanged();
        }
      } else {
        if (!other.modifications_.isEmpty()) {
          if (modificationsBuilder_.isEmpty()) {
            modificationsBuilder_.dispose();
            modificationsBuilder_ = null;
            modifications_ = other.modifications_;
            bitField0_ = (bitField0_ & ~0x00000002);
            modificationsBuilder_ = 
              com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                 getModificationsFieldBuilder() : null;
          } else {
            modificationsBuilder_.addAllMessages(other.modifications_);
          }
        }
      }
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest) e.getUnfinishedMessage();
        throw e;
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.lang.Object name_ = "";
    /**
     * <code>optional string name = 1;</code>
     *
     * <pre>
     * The unique name of the table whose families should be modified.
     * Values are of the form projects/&lt;project&gt;/instances/&lt;instance&gt;/tables/&lt;table&gt;
     * </pre>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <code>optional string name = 1;</code>
     *
     * <pre>
     * The unique name of the table whose families should be modified.
     * Values are of the form projects/&lt;project&gt;/instances/&lt;instance&gt;/tables/&lt;table&gt;
     * </pre>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <code>optional string name = 1;</code>
     *
     * <pre>
     * The unique name of the table whose families should be modified.
     * Values are of the form projects/&lt;project&gt;/instances/&lt;instance&gt;/tables/&lt;table&gt;
     * </pre>
     */
    public Builder setName(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      name_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional string name = 1;</code>
     *
     * <pre>
     * The unique name of the table whose families should be modified.
     * Values are of the form projects/&lt;project&gt;/instances/&lt;instance&gt;/tables/&lt;table&gt;
     * </pre>
     */
    public Builder clearName() {
      
      name_ = getDefaultInstance().getName();
      onChanged();
      return this;
    }
    /**
     * <code>optional string name = 1;</code>
     *
     * <pre>
     * The unique name of the table whose families should be modified.
     * Values are of the form projects/&lt;project&gt;/instances/&lt;instance&gt;/tables/&lt;table&gt;
     * </pre>
     */
    public Builder setNameBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      name_ = value;
      onChanged();
      return this;
    }

    private java.util.List<com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification> modifications_ =
      java.util.Collections.emptyList();
    private void ensureModificationsIsMutable() {
      if (!((bitField0_ & 0x00000002) == 0x00000002)) {
        modifications_ = new java.util.ArrayList<com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification>(modifications_);
        bitField0_ |= 0x00000002;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilder<
        com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification, com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification.Builder, com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest.ModificationOrBuilder> modificationsBuilder_;

    /**
     * <code>repeated .google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification modifications = 2;</code>
     *
     * <pre>
     * Modifications to be atomically applied to the specified table's families.
     * Entries are applied in order, meaning that earlier modifications can be
     * masked by later ones (in the case of repeated updates to the same family,
     * for example).
     * </pre>
     */
    public java.util.List<com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification> getModificationsList() {
      if (modificationsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(modifications_);
      } else {
        return modificationsBuilder_.getMessageList();
      }
    }
    /**
     * <code>repeated .google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification modifications = 2;</code>
     *
     * <pre>
     * Modifications to be atomically applied to the specified table's families.
     * Entries are applied in order, meaning that earlier modifications can be
     * masked by later ones (in the case of repeated updates to the same family,
     * for example).
     * </pre>
     */
    public int getModificationsCount() {
      if (modificationsBuilder_ == null) {
        return modifications_.size();
      } else {
        return modificationsBuilder_.getCount();
      }
    }
    /**
     * <code>repeated .google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification modifications = 2;</code>
     *
     * <pre>
     * Modifications to be atomically applied to the specified table's families.
     * Entries are applied in order, meaning that earlier modifications can be
     * masked by later ones (in the case of repeated updates to the same family,
     * for example).
     * </pre>
     */
    public com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification getModifications(int index) {
      if (modificationsBuilder_ == null) {
        return modifications_.get(index);
      } else {
        return modificationsBuilder_.getMessage(index);
      }
    }
    /**
     * <code>repeated .google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification modifications = 2;</code>
     *
     * <pre>
     * Modifications to be atomically applied to the specified table's families.
     * Entries are applied in order, meaning that earlier modifications can be
     * masked by later ones (in the case of repeated updates to the same family,
     * for example).
     * </pre>
     */
    public Builder setModifications(
        int index, com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification value) {
      if (modificationsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureModificationsIsMutable();
        modifications_.set(index, value);
        onChanged();
      } else {
        modificationsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification modifications = 2;</code>
     *
     * <pre>
     * Modifications to be atomically applied to the specified table's families.
     * Entries are applied in order, meaning that earlier modifications can be
     * masked by later ones (in the case of repeated updates to the same family,
     * for example).
     * </pre>
     */
    public Builder setModifications(
        int index, com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification.Builder builderForValue) {
      if (modificationsBuilder_ == null) {
        ensureModificationsIsMutable();
        modifications_.set(index, builderForValue.build());
        onChanged();
      } else {
        modificationsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification modifications = 2;</code>
     *
     * <pre>
     * Modifications to be atomically applied to the specified table's families.
     * Entries are applied in order, meaning that earlier modifications can be
     * masked by later ones (in the case of repeated updates to the same family,
     * for example).
     * </pre>
     */
    public Builder addModifications(com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification value) {
      if (modificationsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureModificationsIsMutable();
        modifications_.add(value);
        onChanged();
      } else {
        modificationsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <code>repeated .google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification modifications = 2;</code>
     *
     * <pre>
     * Modifications to be atomically applied to the specified table's families.
     * Entries are applied in order, meaning that earlier modifications can be
     * masked by later ones (in the case of repeated updates to the same family,
     * for example).
     * </pre>
     */
    public Builder addModifications(
        int index, com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification value) {
      if (modificationsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureModificationsIsMutable();
        modifications_.add(index, value);
        onChanged();
      } else {
        modificationsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification modifications = 2;</code>
     *
     * <pre>
     * Modifications to be atomically applied to the specified table's families.
     * Entries are applied in order, meaning that earlier modifications can be
     * masked by later ones (in the case of repeated updates to the same family,
     * for example).
     * </pre>
     */
    public Builder addModifications(
        com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification.Builder builderForValue) {
      if (modificationsBuilder_ == null) {
        ensureModificationsIsMutable();
        modifications_.add(builderForValue.build());
        onChanged();
      } else {
        modificationsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification modifications = 2;</code>
     *
     * <pre>
     * Modifications to be atomically applied to the specified table's families.
     * Entries are applied in order, meaning that earlier modifications can be
     * masked by later ones (in the case of repeated updates to the same family,
     * for example).
     * </pre>
     */
    public Builder addModifications(
        int index, com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification.Builder builderForValue) {
      if (modificationsBuilder_ == null) {
        ensureModificationsIsMutable();
        modifications_.add(index, builderForValue.build());
        onChanged();
      } else {
        modificationsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification modifications = 2;</code>
     *
     * <pre>
     * Modifications to be atomically applied to the specified table's families.
     * Entries are applied in order, meaning that earlier modifications can be
     * masked by later ones (in the case of repeated updates to the same family,
     * for example).
     * </pre>
     */
    public Builder addAllModifications(
        java.lang.Iterable<? extends com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification> values) {
      if (modificationsBuilder_ == null) {
        ensureModificationsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, modifications_);
        onChanged();
      } else {
        modificationsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <code>repeated .google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification modifications = 2;</code>
     *
     * <pre>
     * Modifications to be atomically applied to the specified table's families.
     * Entries are applied in order, meaning that earlier modifications can be
     * masked by later ones (in the case of repeated updates to the same family,
     * for example).
     * </pre>
     */
    public Builder clearModifications() {
      if (modificationsBuilder_ == null) {
        modifications_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
      } else {
        modificationsBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>repeated .google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification modifications = 2;</code>
     *
     * <pre>
     * Modifications to be atomically applied to the specified table's families.
     * Entries are applied in order, meaning that earlier modifications can be
     * masked by later ones (in the case of repeated updates to the same family,
     * for example).
     * </pre>
     */
    public Builder removeModifications(int index) {
      if (modificationsBuilder_ == null) {
        ensureModificationsIsMutable();
        modifications_.remove(index);
        onChanged();
      } else {
        modificationsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <code>repeated .google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification modifications = 2;</code>
     *
     * <pre>
     * Modifications to be atomically applied to the specified table's families.
     * Entries are applied in order, meaning that earlier modifications can be
     * masked by later ones (in the case of repeated updates to the same family,
     * for example).
     * </pre>
     */
    public com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification.Builder getModificationsBuilder(
        int index) {
      return getModificationsFieldBuilder().getBuilder(index);
    }
    /**
     * <code>repeated .google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification modifications = 2;</code>
     *
     * <pre>
     * Modifications to be atomically applied to the specified table's families.
     * Entries are applied in order, meaning that earlier modifications can be
     * masked by later ones (in the case of repeated updates to the same family,
     * for example).
     * </pre>
     */
    public com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest.ModificationOrBuilder getModificationsOrBuilder(
        int index) {
      if (modificationsBuilder_ == null) {
        return modifications_.get(index);  } else {
        return modificationsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <code>repeated .google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification modifications = 2;</code>
     *
     * <pre>
     * Modifications to be atomically applied to the specified table's families.
     * Entries are applied in order, meaning that earlier modifications can be
     * masked by later ones (in the case of repeated updates to the same family,
     * for example).
     * </pre>
     */
    public java.util.List<? extends com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest.ModificationOrBuilder> 
         getModificationsOrBuilderList() {
      if (modificationsBuilder_ != null) {
        return modificationsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(modifications_);
      }
    }
    /**
     * <code>repeated .google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification modifications = 2;</code>
     *
     * <pre>
     * Modifications to be atomically applied to the specified table's families.
     * Entries are applied in order, meaning that earlier modifications can be
     * masked by later ones (in the case of repeated updates to the same family,
     * for example).
     * </pre>
     */
    public com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification.Builder addModificationsBuilder() {
      return getModificationsFieldBuilder().addBuilder(
          com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification.getDefaultInstance());
    }
    /**
     * <code>repeated .google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification modifications = 2;</code>
     *
     * <pre>
     * Modifications to be atomically applied to the specified table's families.
     * Entries are applied in order, meaning that earlier modifications can be
     * masked by later ones (in the case of repeated updates to the same family,
     * for example).
     * </pre>
     */
    public com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification.Builder addModificationsBuilder(
        int index) {
      return getModificationsFieldBuilder().addBuilder(
          index, com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification.getDefaultInstance());
    }
    /**
     * <code>repeated .google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification modifications = 2;</code>
     *
     * <pre>
     * Modifications to be atomically applied to the specified table's families.
     * Entries are applied in order, meaning that earlier modifications can be
     * masked by later ones (in the case of repeated updates to the same family,
     * for example).
     * </pre>
     */
    public java.util.List<com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification.Builder> 
         getModificationsBuilderList() {
      return getModificationsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilder<
        com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification, com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification.Builder, com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest.ModificationOrBuilder> 
        getModificationsFieldBuilder() {
      if (modificationsBuilder_ == null) {
        modificationsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
            com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification, com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification.Builder, com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest.ModificationOrBuilder>(
                modifications_,
                ((bitField0_ & 0x00000002) == 0x00000002),
                getParentForChildren(),
                isClean());
        modifications_ = null;
      }
      return modificationsBuilder_;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }


    // @@protoc_insertion_point(builder_scope:google.bigtable.admin.v2.ModifyColumnFamiliesRequest)
  }

  // @@protoc_insertion_point(class_scope:google.bigtable.admin.v2.ModifyColumnFamiliesRequest)
  private static final com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest();
  }

  public static com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<ModifyColumnFamiliesRequest>
      PARSER = new com.google.protobuf.AbstractParser<ModifyColumnFamiliesRequest>() {
    public ModifyColumnFamiliesRequest parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      try {
        return new ModifyColumnFamiliesRequest(input, extensionRegistry);
      } catch (RuntimeException e) {
        if (e.getCause() instanceof
            com.google.protobuf.InvalidProtocolBufferException) {
          throw (com.google.protobuf.InvalidProtocolBufferException)
              e.getCause();
        }
        throw e;
      }
    }
  };

  public static com.google.protobuf.Parser<ModifyColumnFamiliesRequest> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<ModifyColumnFamiliesRequest> getParserForType() {
    return PARSER;
  }

  public com.google.bigtable.admin.v2.ModifyColumnFamiliesRequest getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

